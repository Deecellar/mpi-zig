pub const __builtin = @import("c_builtins");
pub const __helpers = @import("helpers");

pub const ptrdiff_t = c_long;
pub const wchar_t = c_int;
pub const max_align_t = extern struct {
    __aro_max_align_ll: c_longlong = 0,
    __aro_max_align_ld: c_longdouble = 0,
};
pub const MPI_Aint = ptrdiff_t;
pub const MPI_Offset = c_longlong;
pub const MPI_Count = c_longlong;
pub const struct_ompi_communicator_t = opaque {
    pub const FN = OMPI_C_MPI_COMM_NULL_DELETE_FN;
    pub const FN1 = OMPI_C_MPI_COMM_NULL_COPY_FN;
    pub const FN2 = OMPI_C_MPI_COMM_DUP_FN;
    pub const Abort = MPI_Abort;
    pub const Barrier = MPI_Barrier;
    pub const Ibarrier = MPI_Ibarrier;
    pub const init = MPI_Barrier_init;
    pub const coords = MPI_Cart_coords;
    pub const create = MPI_Cart_create;
    pub const get = MPI_Cart_get;
    pub const map = MPI_Cart_map;
    pub const rank = MPI_Cart_rank;
    pub const shift = MPI_Cart_shift;
    pub const sub = MPI_Cart_sub;
    pub const get1 = MPI_Cartdim_get;
    pub const c2f = MPI_Comm_c2f;
    pub const errhandler = MPI_Comm_call_errhandler;
    pub const compare = MPI_Comm_compare;
    pub const group = MPI_Comm_create_group;
    pub const create1 = MPI_Comm_create;
    pub const attr = MPI_Comm_delete_attr;
    pub const dup = MPI_Comm_dup;
    pub const idup = MPI_Comm_idup;
    pub const info = MPI_Comm_dup_with_info;
    pub const info1 = MPI_Comm_idup_with_info;
    pub const attr1 = MPI_Comm_get_attr;
    pub const create2 = MPI_Dist_graph_create;
    pub const adjacent = MPI_Dist_graph_create_adjacent;
    pub const neighbors = MPI_Dist_graph_neighbors;
    pub const count = MPI_Dist_graph_neighbors_count;
    pub const errhandler1 = MPI_Comm_get_errhandler;
    pub const info2 = MPI_Comm_get_info;
    pub const name = MPI_Comm_get_name;
    pub const group1 = MPI_Comm_group;
    pub const rank1 = MPI_Comm_rank;
    pub const group2 = MPI_Comm_remote_group;
    pub const size = MPI_Comm_remote_size;
    pub const attr2 = MPI_Comm_set_attr;
    pub const errhandler2 = MPI_Comm_set_errhandler;
    pub const info3 = MPI_Comm_set_info;
    pub const name1 = MPI_Comm_set_name;
    pub const size1 = MPI_Comm_size;
    pub const split = MPI_Comm_split;
    pub const @"type" = MPI_Comm_split_type;
    pub const inter = MPI_Comm_test_inter;
    pub const open = MPI_File_open;
    pub const create3 = MPI_Graph_create;
    pub const get2 = MPI_Graph_get;
    pub const map1 = MPI_Graph_map;
    pub const count1 = MPI_Graph_neighbors_count;
    pub const neighbors1 = MPI_Graph_neighbors;
    pub const get3 = MPI_Graphdims_get;
    pub const create4 = MPI_Intercomm_create;
    pub const merge = MPI_Intercomm_merge;
    pub const @"test" = MPI_Topo_test;
    pub const Abort1 = PMPI_Abort;
    pub const create5 = PMPI_Dist_graph_create;
    pub const adjacent1 = PMPI_Dist_graph_create_adjacent;
    pub const neighbors2 = PMPI_Dist_graph_neighbors;
    pub const count2 = PMPI_Dist_graph_neighbors_count;
    pub const Barrier1 = PMPI_Barrier;
    pub const Ibarrier1 = PMPI_Ibarrier;
    pub const init1 = PMPI_Barrier_init;
    pub const coords1 = PMPI_Cart_coords;
    pub const create6 = PMPI_Cart_create;
    pub const get4 = PMPI_Cart_get;
    pub const map2 = PMPI_Cart_map;
    pub const rank2 = PMPI_Cart_rank;
    pub const shift1 = PMPI_Cart_shift;
    pub const sub1 = PMPI_Cart_sub;
    pub const get5 = PMPI_Cartdim_get;
    pub const c2f1 = PMPI_Comm_c2f;
    pub const errhandler3 = PMPI_Comm_call_errhandler;
    pub const compare1 = PMPI_Comm_compare;
    pub const group3 = PMPI_Comm_create_group;
    pub const create7 = PMPI_Comm_create;
    pub const attr3 = PMPI_Comm_delete_attr;
    pub const dup1 = PMPI_Comm_dup;
    pub const idup1 = PMPI_Comm_idup;
    pub const info4 = PMPI_Comm_dup_with_info;
    pub const info5 = PMPI_Comm_idup_with_info;
    pub const attr4 = PMPI_Comm_get_attr;
    pub const errhandler4 = PMPI_Comm_get_errhandler;
    pub const info6 = PMPI_Comm_get_info;
    pub const name2 = PMPI_Comm_get_name;
    pub const group4 = PMPI_Comm_group;
    pub const rank3 = PMPI_Comm_rank;
    pub const group5 = PMPI_Comm_remote_group;
    pub const size2 = PMPI_Comm_remote_size;
    pub const attr5 = PMPI_Comm_set_attr;
    pub const errhandler5 = PMPI_Comm_set_errhandler;
    pub const info7 = PMPI_Comm_set_info;
    pub const name3 = PMPI_Comm_set_name;
    pub const size3 = PMPI_Comm_size;
    pub const split1 = PMPI_Comm_split;
    pub const type1 = PMPI_Comm_split_type;
    pub const inter1 = PMPI_Comm_test_inter;
    pub const open1 = PMPI_File_open;
    pub const create8 = PMPI_Graph_create;
    pub const get6 = PMPI_Graph_get;
    pub const map3 = PMPI_Graph_map;
    pub const count3 = PMPI_Graph_neighbors_count;
    pub const neighbors3 = PMPI_Graph_neighbors;
    pub const get7 = PMPI_Graphdims_get;
    pub const create9 = PMPI_Intercomm_create;
    pub const merge1 = PMPI_Intercomm_merge;
    pub const test1 = PMPI_Topo_test;
    pub const delete = MPI_Attr_delete;
    pub const delete1 = PMPI_Attr_delete;
    pub const get8 = MPI_Attr_get;
    pub const get9 = PMPI_Attr_get;
    pub const put = MPI_Attr_put;
    pub const put1 = PMPI_Attr_put;
    pub const FN3 = OMPI_C_MPI_DUP_FN;
    pub const FN4 = OMPI_C_MPI_NULL_COPY_FN;
    pub const FN5 = OMPI_C_MPI_NULL_DELETE_FN;
};
pub const MPI_Comm = ?*struct_ompi_communicator_t;
pub const struct_ompi_datatype_t = opaque {
    pub const FN = OMPI_C_MPI_TYPE_NULL_DELETE_FN;
    pub const FN1 = OMPI_C_MPI_TYPE_NULL_COPY_FN;
    pub const FN2 = OMPI_C_MPI_TYPE_DUP_FN;
    pub const c2f = MPI_Type_c2f;
    pub const resized = MPI_Type_create_resized;
    pub const attr = MPI_Type_delete_attr;
    pub const dup = MPI_Type_dup;
    pub const attr1 = MPI_Type_get_attr;
    pub const contents = MPI_Type_get_contents;
    pub const envelope = MPI_Type_get_envelope;
    pub const extent = MPI_Type_get_extent;
    pub const x = MPI_Type_get_extent_x;
    pub const name = MPI_Type_get_name;
    pub const extent1 = MPI_Type_get_true_extent;
    pub const x1 = MPI_Type_get_true_extent_x;
    pub const attr2 = MPI_Type_set_attr;
    pub const name1 = MPI_Type_set_name;
    pub const size = MPI_Type_size;
    pub const x2 = MPI_Type_size_x;
    pub const c2f1 = PMPI_Type_c2f;
    pub const resized1 = PMPI_Type_create_resized;
    pub const attr3 = PMPI_Type_delete_attr;
    pub const dup1 = PMPI_Type_dup;
    pub const attr4 = PMPI_Type_get_attr;
    pub const contents1 = PMPI_Type_get_contents;
    pub const envelope1 = PMPI_Type_get_envelope;
    pub const extent2 = PMPI_Type_get_extent;
    pub const x3 = PMPI_Type_get_extent_x;
    pub const name2 = PMPI_Type_get_name;
    pub const extent3 = PMPI_Type_get_true_extent;
    pub const x4 = PMPI_Type_get_true_extent_x;
    pub const attr5 = PMPI_Type_set_attr;
    pub const name3 = PMPI_Type_set_name;
    pub const size1 = PMPI_Type_size;
    pub const x5 = PMPI_Type_size_x;
};
pub const MPI_Datatype = ?*struct_ompi_datatype_t;
pub const struct_ompi_errhandler_t = opaque {
    pub const c2f = MPI_Errhandler_c2f;
    pub const c2f1 = PMPI_Errhandler_c2f;
};
pub const MPI_Errhandler = ?*struct_ompi_errhandler_t;
pub const struct_ompi_file_t = opaque {
    pub const c2f = MPI_File_c2f;
    pub const errhandler = MPI_File_call_errhandler;
    pub const errhandler1 = MPI_File_set_errhandler;
    pub const errhandler2 = MPI_File_get_errhandler;
    pub const size = MPI_File_set_size;
    pub const preallocate = MPI_File_preallocate;
    pub const size1 = MPI_File_get_size;
    pub const group = MPI_File_get_group;
    pub const amode = MPI_File_get_amode;
    pub const info = MPI_File_set_info;
    pub const info1 = MPI_File_get_info;
    pub const view = MPI_File_set_view;
    pub const view1 = MPI_File_get_view;
    pub const at = MPI_File_read_at;
    pub const all = MPI_File_read_at_all;
    pub const at1 = MPI_File_write_at;
    pub const all1 = MPI_File_write_at_all;
    pub const at2 = MPI_File_iread_at;
    pub const at3 = MPI_File_iwrite_at;
    pub const all2 = MPI_File_iread_at_all;
    pub const all3 = MPI_File_iwrite_at_all;
    pub const read = MPI_File_read;
    pub const all4 = MPI_File_read_all;
    pub const write = MPI_File_write;
    pub const all5 = MPI_File_write_all;
    pub const iread = MPI_File_iread;
    pub const iwrite = MPI_File_iwrite;
    pub const all6 = MPI_File_iread_all;
    pub const all7 = MPI_File_iwrite_all;
    pub const seek = MPI_File_seek;
    pub const position = MPI_File_get_position;
    pub const offset = MPI_File_get_byte_offset;
    pub const shared = MPI_File_read_shared;
    pub const shared1 = MPI_File_write_shared;
    pub const shared2 = MPI_File_iread_shared;
    pub const shared3 = MPI_File_iwrite_shared;
    pub const ordered = MPI_File_read_ordered;
    pub const ordered1 = MPI_File_write_ordered;
    pub const shared4 = MPI_File_seek_shared;
    pub const shared5 = MPI_File_get_position_shared;
    pub const begin = MPI_File_read_at_all_begin;
    pub const end = MPI_File_read_at_all_end;
    pub const begin1 = MPI_File_write_at_all_begin;
    pub const end1 = MPI_File_write_at_all_end;
    pub const begin2 = MPI_File_read_all_begin;
    pub const end2 = MPI_File_read_all_end;
    pub const begin3 = MPI_File_write_all_begin;
    pub const end3 = MPI_File_write_all_end;
    pub const begin4 = MPI_File_read_ordered_begin;
    pub const end4 = MPI_File_read_ordered_end;
    pub const begin5 = MPI_File_write_ordered_begin;
    pub const end5 = MPI_File_write_ordered_end;
    pub const extent = MPI_File_get_type_extent;
    pub const atomicity = MPI_File_set_atomicity;
    pub const atomicity1 = MPI_File_get_atomicity;
    pub const sync = MPI_File_sync;
    pub const c2f1 = PMPI_File_c2f;
    pub const errhandler3 = PMPI_File_call_errhandler;
    pub const errhandler4 = PMPI_File_set_errhandler;
    pub const errhandler5 = PMPI_File_get_errhandler;
    pub const size2 = PMPI_File_set_size;
    pub const preallocate1 = PMPI_File_preallocate;
    pub const size3 = PMPI_File_get_size;
    pub const group1 = PMPI_File_get_group;
    pub const amode1 = PMPI_File_get_amode;
    pub const info2 = PMPI_File_set_info;
    pub const info3 = PMPI_File_get_info;
    pub const view2 = PMPI_File_set_view;
    pub const view3 = PMPI_File_get_view;
    pub const at4 = PMPI_File_read_at;
    pub const all8 = PMPI_File_read_at_all;
    pub const at5 = PMPI_File_write_at;
    pub const all9 = PMPI_File_write_at_all;
    pub const at6 = PMPI_File_iread_at;
    pub const at7 = PMPI_File_iwrite_at;
    pub const all10 = PMPI_File_iread_at_all;
    pub const all11 = PMPI_File_iwrite_at_all;
    pub const read1 = PMPI_File_read;
    pub const all12 = PMPI_File_read_all;
    pub const write1 = PMPI_File_write;
    pub const all13 = PMPI_File_write_all;
    pub const iread1 = PMPI_File_iread;
    pub const iwrite1 = PMPI_File_iwrite;
    pub const all14 = PMPI_File_iread_all;
    pub const all15 = PMPI_File_iwrite_all;
    pub const seek1 = PMPI_File_seek;
    pub const position1 = PMPI_File_get_position;
    pub const offset1 = PMPI_File_get_byte_offset;
    pub const shared6 = PMPI_File_read_shared;
    pub const shared7 = PMPI_File_write_shared;
    pub const shared8 = PMPI_File_iread_shared;
    pub const shared9 = PMPI_File_iwrite_shared;
    pub const ordered2 = PMPI_File_read_ordered;
    pub const ordered3 = PMPI_File_write_ordered;
    pub const shared10 = PMPI_File_seek_shared;
    pub const shared11 = PMPI_File_get_position_shared;
    pub const begin6 = PMPI_File_read_at_all_begin;
    pub const end6 = PMPI_File_read_at_all_end;
    pub const begin7 = PMPI_File_write_at_all_begin;
    pub const end7 = PMPI_File_write_at_all_end;
    pub const begin8 = PMPI_File_read_all_begin;
    pub const end8 = PMPI_File_read_all_end;
    pub const begin9 = PMPI_File_write_all_begin;
    pub const end9 = PMPI_File_write_all_end;
    pub const begin10 = PMPI_File_read_ordered_begin;
    pub const end10 = PMPI_File_read_ordered_end;
    pub const begin11 = PMPI_File_write_ordered_begin;
    pub const end11 = PMPI_File_write_ordered_end;
    pub const extent1 = PMPI_File_get_type_extent;
    pub const atomicity2 = PMPI_File_set_atomicity;
    pub const atomicity3 = PMPI_File_get_atomicity;
    pub const sync1 = PMPI_File_sync;
};
pub const MPI_File = ?*struct_ompi_file_t;
pub const struct_ompi_group_t = opaque {
    pub const group = MPI_Comm_create_from_group;
    pub const c2f = MPI_Group_c2f;
    pub const compare = MPI_Group_compare;
    pub const difference = MPI_Group_difference;
    pub const excl = MPI_Group_excl;
    pub const incl = MPI_Group_incl;
    pub const intersection = MPI_Group_intersection;
    pub const excl1 = MPI_Group_range_excl;
    pub const incl1 = MPI_Group_range_incl;
    pub const rank = MPI_Group_rank;
    pub const size = MPI_Group_size;
    pub const ranks = MPI_Group_translate_ranks;
    pub const @"union" = MPI_Group_union;
    pub const groups = MPI_Intercomm_create_from_groups;
    pub const post = MPI_Win_post;
    pub const start = MPI_Win_start;
    pub const group1 = PMPI_Comm_create_from_group;
    pub const c2f1 = PMPI_Group_c2f;
    pub const compare1 = PMPI_Group_compare;
    pub const difference1 = PMPI_Group_difference;
    pub const excl2 = PMPI_Group_excl;
    pub const incl2 = PMPI_Group_incl;
    pub const intersection1 = PMPI_Group_intersection;
    pub const excl3 = PMPI_Group_range_excl;
    pub const incl3 = PMPI_Group_range_incl;
    pub const rank1 = PMPI_Group_rank;
    pub const size1 = PMPI_Group_size;
    pub const ranks1 = PMPI_Group_translate_ranks;
    pub const union1 = PMPI_Group_union;
    pub const groups1 = PMPI_Intercomm_create_from_groups;
    pub const post1 = PMPI_Win_post;
    pub const start1 = PMPI_Win_start;
};
pub const MPI_Group = ?*struct_ompi_group_t;
pub const struct_ompi_info_t = opaque {
    pub const c2f = MPI_Info_c2f;
    pub const delete = MPI_Info_delete;
    pub const dup = MPI_Info_dup;
    pub const get = MPI_Info_get;
    pub const nkeys = MPI_Info_get_nkeys;
    pub const nthkey = MPI_Info_get_nthkey;
    pub const string = MPI_Info_get_string;
    pub const valuelen = MPI_Info_get_valuelen;
    pub const set = MPI_Info_set;
    pub const port = MPI_Open_port;
    pub const init = MPI_Session_init;
    pub const dynamic = MPI_Win_create_dynamic;
    pub const c2f1 = PMPI_Info_c2f;
    pub const delete1 = PMPI_Info_delete;
    pub const dup1 = PMPI_Info_dup;
    pub const get1 = PMPI_Info_get;
    pub const nkeys1 = PMPI_Info_get_nkeys;
    pub const nthkey1 = PMPI_Info_get_nthkey;
    pub const string1 = PMPI_Info_get_string;
    pub const valuelen1 = PMPI_Info_get_valuelen;
    pub const set1 = PMPI_Info_set;
    pub const port1 = PMPI_Open_port;
    pub const init1 = PMPI_Session_init;
    pub const dynamic1 = PMPI_Win_create_dynamic;
};
pub const MPI_Info = ?*struct_ompi_info_t;
pub const struct_ompi_op_t = opaque {
    pub const c2f = MPI_Op_c2f;
    pub const commutative = MPI_Op_commutative;
    pub const c2f1 = PMPI_Op_c2f;
    pub const commutative1 = PMPI_Op_commutative;
};
pub const MPI_Op = ?*struct_ompi_op_t;
pub const struct_ompi_request_t = opaque {
    pub const complete = MPI_Grequest_complete;
    pub const Parrived = MPI_Parrived;
    pub const c2f = MPI_Request_c2f;
    pub const status = MPI_Request_get_status;
    pub const complete1 = PMPI_Grequest_complete;
    pub const Parrived1 = PMPI_Parrived;
    pub const c2f1 = PMPI_Request_c2f;
    pub const status1 = PMPI_Request_get_status;
};
pub const MPI_Request = ?*struct_ompi_request_t;
pub const struct_ompi_message_t = opaque {
    pub const c2f = MPI_Message_c2f;
    pub const c2f1 = PMPI_Message_c2f;
};
pub const MPI_Message = ?*struct_ompi_message_t;
pub const struct_ompi_status_public_t = extern struct {
    MPI_SOURCE: c_int = 0,
    MPI_TAG: c_int = 0,
    MPI_ERROR: c_int = 0,
    _cancelled: c_int = 0,
    _ucount: usize = 0,
    pub const count = MPI_Get_count;
    pub const elements = MPI_Get_elements;
    pub const x = MPI_Get_elements_x;
    pub const c2f = MPI_Status_c2f;
    pub const c2f08 = MPI_Status_c2f08;
    pub const cancelled = MPI_Status_set_cancelled;
    pub const elements1 = MPI_Status_set_elements;
    pub const x1 = MPI_Status_set_elements_x;
    pub const cancelled1 = MPI_Test_cancelled;
    pub const count1 = PMPI_Get_count;
    pub const elements2 = PMPI_Get_elements;
    pub const x2 = PMPI_Get_elements_x;
    pub const c2f1 = PMPI_Status_c2f;
    pub const c2f081 = PMPI_Status_c2f08;
    pub const cancelled2 = PMPI_Status_set_cancelled;
    pub const elements3 = PMPI_Status_set_elements;
    pub const x3 = PMPI_Status_set_elements_x;
    pub const cancelled3 = PMPI_Test_cancelled;
};
pub const MPI_Status = struct_ompi_status_public_t;
pub const struct_ompi_f08_status_public_t = extern struct {
    MPI_SOURCE: c_int = 0,
    MPI_TAG: c_int = 0,
    MPI_ERROR: c_int = 0,
    internal: [3]c_int = @import("std").mem.zeroes([3]c_int),
    pub const f082c = MPI_Status_f082c;
    pub const f082f = MPI_Status_f082f;
    pub const f082f1 = PMPI_Status_f082f;
    pub const f082c1 = PMPI_Status_f082c;
};
pub const MPI_F08_status = struct_ompi_f08_status_public_t;
pub const struct_ompi_win_t = opaque {
    pub const FN = OMPI_C_MPI_WIN_NULL_DELETE_FN;
    pub const FN1 = OMPI_C_MPI_WIN_NULL_COPY_FN;
    pub const FN2 = OMPI_C_MPI_WIN_DUP_FN;
    pub const attach = MPI_Win_attach;
    pub const c2f = MPI_Win_c2f;
    pub const errhandler = MPI_Win_call_errhandler;
    pub const complete = MPI_Win_complete;
    pub const attr = MPI_Win_delete_attr;
    pub const detach = MPI_Win_detach;
    pub const all = MPI_Win_flush_all;
    pub const all1 = MPI_Win_flush_local_all;
    pub const attr1 = MPI_Win_get_attr;
    pub const errhandler1 = MPI_Win_get_errhandler;
    pub const group = MPI_Win_get_group;
    pub const info = MPI_Win_get_info;
    pub const name = MPI_Win_get_name;
    pub const attr2 = MPI_Win_set_attr;
    pub const errhandler2 = MPI_Win_set_errhandler;
    pub const info1 = MPI_Win_set_info;
    pub const name1 = MPI_Win_set_name;
    pub const query = MPI_Win_shared_query;
    pub const sync = MPI_Win_sync;
    pub const @"test" = MPI_Win_test;
    pub const all2 = MPI_Win_unlock_all;
    pub const wait = MPI_Win_wait;
    pub const attach1 = PMPI_Win_attach;
    pub const c2f1 = PMPI_Win_c2f;
    pub const errhandler3 = PMPI_Win_call_errhandler;
    pub const complete1 = PMPI_Win_complete;
    pub const attr3 = PMPI_Win_delete_attr;
    pub const detach1 = PMPI_Win_detach;
    pub const all3 = PMPI_Win_flush_all;
    pub const all4 = PMPI_Win_flush_local_all;
    pub const attr4 = PMPI_Win_get_attr;
    pub const errhandler4 = PMPI_Win_get_errhandler;
    pub const group1 = PMPI_Win_get_group;
    pub const info2 = PMPI_Win_get_info;
    pub const name2 = PMPI_Win_get_name;
    pub const attr5 = PMPI_Win_set_attr;
    pub const errhandler5 = PMPI_Win_set_errhandler;
    pub const info3 = PMPI_Win_set_info;
    pub const name3 = PMPI_Win_set_name;
    pub const query1 = PMPI_Win_shared_query;
    pub const sync1 = PMPI_Win_sync;
    pub const test1 = PMPI_Win_test;
    pub const all5 = PMPI_Win_unlock_all;
    pub const wait1 = PMPI_Win_wait;
};
pub const MPI_Win = ?*struct_ompi_win_t;
pub const struct_mca_base_var_enum_t = opaque {
    pub const info = PMPI_T_enum_get_info;
    pub const item = PMPI_T_enum_get_item;
    pub const info1 = MPI_T_enum_get_info;
    pub const item1 = MPI_T_enum_get_item;
};
pub const MPI_T_enum = ?*struct_mca_base_var_enum_t;
pub const struct_ompi_mpit_cvar_handle_t = opaque {
    pub const read = PMPI_T_cvar_read;
    pub const write = PMPI_T_cvar_write;
    pub const read1 = MPI_T_cvar_read;
    pub const write1 = MPI_T_cvar_write;
};
pub const MPI_T_cvar_handle = ?*struct_ompi_mpit_cvar_handle_t;
pub const struct_mca_base_pvar_handle_t = opaque {};
pub const MPI_T_pvar_handle = ?*struct_mca_base_pvar_handle_t;
pub const struct_mca_base_pvar_session_t = opaque {
    pub const alloc = PMPI_T_pvar_handle_alloc;
    pub const free = PMPI_T_pvar_handle_free;
    pub const start = PMPI_T_pvar_start;
    pub const stop = PMPI_T_pvar_stop;
    pub const read = PMPI_T_pvar_read;
    pub const write = PMPI_T_pvar_write;
    pub const reset = PMPI_T_pvar_reset;
    pub const readreset = PMPI_T_pvar_readreset;
    pub const alloc1 = MPI_T_pvar_handle_alloc;
    pub const free1 = MPI_T_pvar_handle_free;
    pub const start1 = MPI_T_pvar_start;
    pub const stop1 = MPI_T_pvar_stop;
    pub const read1 = MPI_T_pvar_read;
    pub const write1 = MPI_T_pvar_write;
    pub const reset1 = MPI_T_pvar_reset;
    pub const readreset1 = MPI_T_pvar_readreset;
};
pub const MPI_T_pvar_session = ?*struct_mca_base_pvar_session_t;
pub const struct_ompi_instance_t = opaque {
    pub const pset = MPI_Group_from_session_pset;
    pub const c2f = MPI_Session_c2f;
    pub const errhandler = MPI_Session_call_errhandler;
    pub const errhandler1 = MPI_Session_get_errhandler;
    pub const info = MPI_Session_get_info;
    pub const psets = MPI_Session_get_num_psets;
    pub const pset1 = MPI_Session_get_nth_pset;
    pub const info1 = MPI_Session_get_pset_info;
    pub const errhandler2 = MPI_Session_set_errhandler;
    pub const info2 = MPI_Session_set_info;
    pub const pset2 = PMPI_Group_from_session_pset;
    pub const c2f1 = PMPI_Session_c2f;
    pub const errhandler3 = PMPI_Session_call_errhandler;
    pub const errhandler4 = PMPI_Session_get_errhandler;
    pub const info3 = PMPI_Session_get_info;
    pub const psets1 = PMPI_Session_get_num_psets;
    pub const pset3 = PMPI_Session_get_nth_pset;
    pub const info4 = PMPI_Session_get_pset_info;
    pub const errhandler5 = PMPI_Session_set_errhandler;
    pub const info5 = PMPI_Session_set_info;
};
pub const MPI_Session = ?*struct_ompi_instance_t;
pub const ompi_status_public_t = struct_ompi_status_public_t;
pub const ompi_f08_status_public_t = struct_ompi_f08_status_public_t;
pub const MPI_Datarep_extent_function = fn (MPI_Datatype, [*c]MPI_Aint, ?*anyopaque) callconv(.c) c_int;
pub const MPI_Datarep_conversion_function = fn (?*anyopaque, MPI_Datatype, c_int, ?*anyopaque, MPI_Offset, ?*anyopaque) callconv(.c) c_int;
pub const MPI_Comm_errhandler_function = fn ([*c]MPI_Comm, [*c]c_int, ...) callconv(.c) void;
pub const MPI_Session_errhandler_function = fn ([*c]MPI_Session, [*c]c_int, ...) callconv(.c) void;
pub const ompi_file_errhandler_function = fn ([*c]MPI_File, [*c]c_int, ...) callconv(.c) void;
pub const MPI_Win_errhandler_function = fn ([*c]MPI_Win, [*c]c_int, ...) callconv(.c) void;
pub const MPI_User_function = fn (?*anyopaque, ?*anyopaque, [*c]c_int, [*c]MPI_Datatype) callconv(.c) void;
pub const MPI_Comm_copy_attr_function = fn (MPI_Comm, c_int, ?*anyopaque, ?*anyopaque, ?*anyopaque, [*c]c_int) callconv(.c) c_int;
pub const MPI_Comm_delete_attr_function = fn (MPI_Comm, c_int, ?*anyopaque, ?*anyopaque) callconv(.c) c_int;
pub const MPI_Type_copy_attr_function = fn (MPI_Datatype, c_int, ?*anyopaque, ?*anyopaque, ?*anyopaque, [*c]c_int) callconv(.c) c_int;
pub const MPI_Type_delete_attr_function = fn (MPI_Datatype, c_int, ?*anyopaque, ?*anyopaque) callconv(.c) c_int;
pub const MPI_Win_copy_attr_function = fn (MPI_Win, c_int, ?*anyopaque, ?*anyopaque, ?*anyopaque, [*c]c_int) callconv(.c) c_int;
pub const MPI_Win_delete_attr_function = fn (MPI_Win, c_int, ?*anyopaque, ?*anyopaque) callconv(.c) c_int;
pub const MPI_Grequest_query_function = fn (?*anyopaque, [*c]MPI_Status) callconv(.c) c_int;
pub const MPI_Grequest_free_function = fn (?*anyopaque) callconv(.c) c_int;
pub const MPI_Grequest_cancel_function = fn (?*anyopaque, c_int) callconv(.c) c_int;
pub const MPI_Comm_errhandler_fn = MPI_Comm_errhandler_function;
pub const MPI_File_errhandler_fn = ompi_file_errhandler_function;
pub const MPI_File_errhandler_function = ompi_file_errhandler_function;
pub const MPI_Win_errhandler_fn = MPI_Win_errhandler_function;
pub const MPI_TAG_UB: c_int = 0;
pub const MPI_HOST: c_int = 1;
pub const MPI_IO: c_int = 2;
pub const MPI_WTIME_IS_GLOBAL: c_int = 3;
pub const MPI_APPNUM: c_int = 4;
pub const MPI_LASTUSEDCODE: c_int = 5;
pub const MPI_UNIVERSE_SIZE: c_int = 6;
pub const MPI_WIN_BASE: c_int = 7;
pub const MPI_WIN_SIZE: c_int = 8;
pub const MPI_WIN_DISP_UNIT: c_int = 9;
pub const MPI_WIN_CREATE_FLAVOR: c_int = 10;
pub const MPI_WIN_MODEL: c_int = 11;
pub const MPI_FT: c_int = 12;
pub const MPI_ATTR_PREDEFINED_KEY_MAX: c_int = 13;
const enum_unnamed_1 = c_uint;
pub const MPI_IDENT: c_int = 0;
pub const MPI_CONGRUENT: c_int = 1;
pub const MPI_SIMILAR: c_int = 2;
pub const MPI_UNEQUAL: c_int = 3;
const enum_unnamed_2 = c_uint;
pub const MPI_THREAD_SINGLE: c_int = 0;
pub const MPI_THREAD_FUNNELED: c_int = 1;
pub const MPI_THREAD_SERIALIZED: c_int = 2;
pub const MPI_THREAD_MULTIPLE: c_int = 3;
const enum_unnamed_3 = c_uint;
pub const MPI_COMBINER_NAMED: c_int = 0;
pub const MPI_COMBINER_DUP: c_int = 1;
pub const MPI_COMBINER_CONTIGUOUS: c_int = 2;
pub const MPI_COMBINER_VECTOR: c_int = 3;
pub const OMPI_WAS_MPI_COMBINER_HVECTOR_INTEGER: c_int = 4;
pub const MPI_COMBINER_HVECTOR: c_int = 5;
pub const MPI_COMBINER_INDEXED: c_int = 6;
pub const OMPI_WAS_MPI_COMBINER_HINDEXED_INTEGER: c_int = 7;
pub const MPI_COMBINER_HINDEXED: c_int = 8;
pub const MPI_COMBINER_INDEXED_BLOCK: c_int = 9;
pub const OMPI_WAS_MPI_COMBINER_STRUCT_INTEGER: c_int = 10;
pub const MPI_COMBINER_STRUCT: c_int = 11;
pub const MPI_COMBINER_SUBARRAY: c_int = 12;
pub const MPI_COMBINER_DARRAY: c_int = 13;
pub const MPI_COMBINER_F90_REAL: c_int = 14;
pub const MPI_COMBINER_F90_COMPLEX: c_int = 15;
pub const MPI_COMBINER_F90_INTEGER: c_int = 16;
pub const MPI_COMBINER_RESIZED: c_int = 17;
pub const MPI_COMBINER_HINDEXED_BLOCK: c_int = 18;
const enum_unnamed_4 = c_uint;
pub const MPI_COMM_TYPE_SHARED: c_int = 0;
pub const OMPI_COMM_TYPE_HWTHREAD: c_int = 1;
pub const OMPI_COMM_TYPE_CORE: c_int = 2;
pub const OMPI_COMM_TYPE_L1CACHE: c_int = 3;
pub const OMPI_COMM_TYPE_L2CACHE: c_int = 4;
pub const OMPI_COMM_TYPE_L3CACHE: c_int = 5;
pub const OMPI_COMM_TYPE_SOCKET: c_int = 6;
pub const OMPI_COMM_TYPE_NUMA: c_int = 7;
pub const OMPI_COMM_TYPE_BOARD: c_int = 8;
pub const OMPI_COMM_TYPE_HOST: c_int = 9;
pub const OMPI_COMM_TYPE_CU: c_int = 10;
pub const OMPI_COMM_TYPE_CLUSTER: c_int = 11;
pub const MPI_COMM_TYPE_HW_UNGUIDED: c_int = 12;
pub const MPI_COMM_TYPE_HW_GUIDED: c_int = 13;
const enum_unnamed_5 = c_uint;
pub const MPI_T_VERBOSITY_USER_BASIC: c_int = 0;
pub const MPI_T_VERBOSITY_USER_DETAIL: c_int = 1;
pub const MPI_T_VERBOSITY_USER_ALL: c_int = 2;
pub const MPI_T_VERBOSITY_TUNER_BASIC: c_int = 3;
pub const MPI_T_VERBOSITY_TUNER_DETAIL: c_int = 4;
pub const MPI_T_VERBOSITY_TUNER_ALL: c_int = 5;
pub const MPI_T_VERBOSITY_MPIDEV_BASIC: c_int = 6;
pub const MPI_T_VERBOSITY_MPIDEV_DETAIL: c_int = 7;
pub const MPI_T_VERBOSITY_MPIDEV_ALL: c_int = 8;
const enum_unnamed_6 = c_uint;
pub const MPI_T_SCOPE_CONSTANT: c_int = 0;
pub const MPI_T_SCOPE_READONLY: c_int = 1;
pub const MPI_T_SCOPE_LOCAL: c_int = 2;
pub const MPI_T_SCOPE_GROUP: c_int = 3;
pub const MPI_T_SCOPE_GROUP_EQ: c_int = 4;
pub const MPI_T_SCOPE_ALL: c_int = 5;
pub const MPI_T_SCOPE_ALL_EQ: c_int = 6;
const enum_unnamed_7 = c_uint;
pub const MPI_T_BIND_NO_OBJECT: c_int = 0;
pub const MPI_T_BIND_MPI_COMM: c_int = 1;
pub const MPI_T_BIND_MPI_DATATYPE: c_int = 2;
pub const MPI_T_BIND_MPI_ERRHANDLER: c_int = 3;
pub const MPI_T_BIND_MPI_FILE: c_int = 4;
pub const MPI_T_BIND_MPI_GROUP: c_int = 5;
pub const MPI_T_BIND_MPI_OP: c_int = 6;
pub const MPI_T_BIND_MPI_REQUEST: c_int = 7;
pub const MPI_T_BIND_MPI_WIN: c_int = 8;
pub const MPI_T_BIND_MPI_MESSAGE: c_int = 9;
pub const MPI_T_BIND_MPI_INFO: c_int = 10;
const enum_unnamed_8 = c_uint;
pub const MPI_T_PVAR_CLASS_STATE: c_int = 0;
pub const MPI_T_PVAR_CLASS_LEVEL: c_int = 1;
pub const MPI_T_PVAR_CLASS_SIZE: c_int = 2;
pub const MPI_T_PVAR_CLASS_PERCENTAGE: c_int = 3;
pub const MPI_T_PVAR_CLASS_HIGHWATERMARK: c_int = 4;
pub const MPI_T_PVAR_CLASS_LOWWATERMARK: c_int = 5;
pub const MPI_T_PVAR_CLASS_COUNTER: c_int = 6;
pub const MPI_T_PVAR_CLASS_AGGREGATE: c_int = 7;
pub const MPI_T_PVAR_CLASS_TIMER: c_int = 8;
pub const MPI_T_PVAR_CLASS_GENERIC: c_int = 9;
const enum_unnamed_9 = c_uint;
pub extern fn OMPI_C_MPI_TYPE_NULL_DELETE_FN(datatype: MPI_Datatype, type_keyval: c_int, attribute_val_out: ?*anyopaque, extra_state: ?*anyopaque) c_int;
pub extern fn OMPI_C_MPI_TYPE_NULL_COPY_FN(datatype: MPI_Datatype, type_keyval: c_int, extra_state: ?*anyopaque, attribute_val_in: ?*anyopaque, attribute_val_out: ?*anyopaque, flag: [*c]c_int) c_int;
pub extern fn OMPI_C_MPI_TYPE_DUP_FN(datatype: MPI_Datatype, type_keyval: c_int, extra_state: ?*anyopaque, attribute_val_in: ?*anyopaque, attribute_val_out: ?*anyopaque, flag: [*c]c_int) c_int;
pub extern fn OMPI_C_MPI_COMM_NULL_DELETE_FN(comm: MPI_Comm, comm_keyval: c_int, attribute_val_out: ?*anyopaque, extra_state: ?*anyopaque) c_int;
pub extern fn OMPI_C_MPI_COMM_NULL_COPY_FN(comm: MPI_Comm, comm_keyval: c_int, extra_state: ?*anyopaque, attribute_val_in: ?*anyopaque, attribute_val_out: ?*anyopaque, flag: [*c]c_int) c_int;
pub extern fn OMPI_C_MPI_COMM_DUP_FN(comm: MPI_Comm, comm_keyval: c_int, extra_state: ?*anyopaque, attribute_val_in: ?*anyopaque, attribute_val_out: ?*anyopaque, flag: [*c]c_int) c_int;
pub extern fn OMPI_C_MPI_WIN_NULL_DELETE_FN(window: MPI_Win, win_keyval: c_int, attribute_val_out: ?*anyopaque, extra_state: ?*anyopaque) c_int;
pub extern fn OMPI_C_MPI_WIN_NULL_COPY_FN(window: MPI_Win, win_keyval: c_int, extra_state: ?*anyopaque, attribute_val_in: ?*anyopaque, attribute_val_out: ?*anyopaque, flag: [*c]c_int) c_int;
pub extern fn OMPI_C_MPI_WIN_DUP_FN(window: MPI_Win, win_keyval: c_int, extra_state: ?*anyopaque, attribute_val_in: ?*anyopaque, attribute_val_out: ?*anyopaque, flag: [*c]c_int) c_int;
pub const struct_ompi_predefined_communicator_t = opaque {};
pub extern var ompi_mpi_comm_world: struct_ompi_predefined_communicator_t;
pub extern var ompi_mpi_comm_self : struct_ompi_predefined_communicator_t; // /usr/include/mpi.h:1042:60
pub extern var ompi_mpi_comm_null : struct_ompi_predefined_communicator_t; // /usr/include/mpi.h:1043:60
pub const struct_ompi_predefined_group_t = opaque {};
pub extern var ompi_mpi_group_empty: struct_ompi_predefined_group_t;
pub const ompi_mpi_group_null = @compileError("local variable has opaque type"); // /usr/include/mpi.h:1046:53
pub const struct_ompi_predefined_instance_t = opaque {};
pub extern var ompi_mpi_instance_null: struct_ompi_predefined_instance_t;
pub const struct_ompi_predefined_request_t = opaque {};
pub extern var ompi_request_null: struct_ompi_predefined_request_t;
pub const struct_ompi_predefined_message_t = opaque {};
pub extern var ompi_message_null: struct_ompi_predefined_message_t;
pub const ompi_message_no_proc = @compileError("local variable has opaque type"); // /usr/include/mpi.h:1053:55
pub const struct_ompi_predefined_op_t = opaque {};
pub extern var ompi_mpi_op_null: struct_ompi_predefined_op_t;
pub extern var ompi_mpi_op_min : struct_ompi_predefined_op_t; // /usr/include/mpi.h:1056:50
pub extern var ompi_mpi_op_max : struct_ompi_predefined_op_t; // /usr/include/mpi.h:1057:50
pub extern var ompi_mpi_op_sum : struct_ompi_predefined_op_t; // /usr/include/mpi.h:1058:50
pub extern var ompi_mpi_op_prod : struct_ompi_predefined_op_t; // /usr/include/mpi.h:1059:50
pub extern var ompi_mpi_op_land : struct_ompi_predefined_op_t; // /usr/include/mpi.h:1060:50
pub extern var ompi_mpi_op_band : struct_ompi_predefined_op_t; // /usr/include/mpi.h:1061:50
pub extern var ompi_mpi_op_lor : struct_ompi_predefined_op_t; // /usr/include/mpi.h:1062:50
pub extern var ompi_mpi_op_bor : struct_ompi_predefined_op_t; // /usr/include/mpi.h:1063:50
pub extern var ompi_mpi_op_lxor : struct_ompi_predefined_op_t; // /usr/include/mpi.h:1064:50
pub extern var ompi_mpi_op_bxor : struct_ompi_predefined_op_t; // /usr/include/mpi.h:1065:50
pub extern var ompi_mpi_op_maxloc : struct_ompi_predefined_op_t; // /usr/include/mpi.h:1066:50
pub extern var ompi_mpi_op_minloc : struct_ompi_predefined_op_t; // /usr/include/mpi.h:1067:50
pub extern var ompi_mpi_op_replace : struct_ompi_predefined_op_t; // /usr/include/mpi.h:1068:50
pub extern var ompi_mpi_op_no_op : struct_ompi_predefined_op_t; // /usr/include/mpi.h:1069:50
pub const struct_ompi_predefined_datatype_t = opaque {};
pub extern var ompi_mpi_datatype_null: struct_ompi_predefined_datatype_t;
pub extern var ompi_mpi_char : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1074:56
pub extern var ompi_mpi_signed_char : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1075:56
pub extern var ompi_mpi_unsigned_char : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1076:56
pub extern var ompi_mpi_byte : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1077:56
pub extern var ompi_mpi_short : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1078:56
pub extern var ompi_mpi_unsigned_short : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1079:56
pub extern var ompi_mpi_int : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1080:56
pub extern var ompi_mpi_unsigned : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1081:56
pub extern var ompi_mpi_long : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1082:56
pub extern var ompi_mpi_unsigned_long : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1083:56
pub extern var ompi_mpi_long_long_int : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1084:56
pub extern var ompi_mpi_unsigned_long_long : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1085:56
pub extern var ompi_mpi_float : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1086:56
pub extern var ompi_mpi_double : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1087:56
pub extern var ompi_mpi_long_double : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1088:56
pub extern var ompi_mpi_wchar : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1089:56
pub extern var ompi_mpi_packed : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1090:56
pub extern var ompi_mpi_cxx_bool : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1095:56
pub extern var ompi_mpi_cxx_cplex : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1096:56
pub extern var ompi_mpi_cxx_dblcplex : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1097:56
pub extern var ompi_mpi_cxx_ldblcplex : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1098:56
pub extern var ompi_mpi_logical : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1103:56
pub extern var ompi_mpi_character : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1104:56
pub extern var ompi_mpi_integer : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1105:56
pub extern var ompi_mpi_real : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1106:56
pub extern var ompi_mpi_dblprec : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1107:56
pub extern var ompi_mpi_cplex : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1108:56
pub extern var ompi_mpi_dblcplex : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1109:56
pub extern var ompi_mpi_ldblcplex : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1110:56
pub extern var ompi_mpi_2int : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1113:56
pub extern var ompi_mpi_2integer : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1114:56
pub extern var ompi_mpi_2real : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1115:56
pub extern var ompi_mpi_2dblprec : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1116:56
pub extern var ompi_mpi_2cplex : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1117:56
pub extern var ompi_mpi_2dblcplex : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1118:56
pub extern var ompi_mpi_float_int : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1120:56
pub extern var ompi_mpi_double_int : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1121:56
pub extern var ompi_mpi_longdbl_int : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1122:56
pub extern var ompi_mpi_short_int : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1123:56
pub extern var ompi_mpi_long_int : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1124:56
pub extern var ompi_mpi_logical1 : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1127:56
pub extern var ompi_mpi_logical2 : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1128:56
pub extern var ompi_mpi_logical4 : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1129:56
pub extern var ompi_mpi_logical8 : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1130:56
pub extern var ompi_mpi_integer1 : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1131:56
pub extern var ompi_mpi_integer2 : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1132:56
pub extern var ompi_mpi_integer4 : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1133:56
pub extern var ompi_mpi_integer8 : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1134:56
pub extern var ompi_mpi_integer16 : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1135:56
pub extern var ompi_mpi_real2 : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1136:56
pub extern var ompi_mpi_real4 : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1137:56
pub extern var ompi_mpi_real8 : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1138:56
pub extern var ompi_mpi_real16 : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1139:56
pub extern var ompi_mpi_complex4 : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1140:56
pub extern var ompi_mpi_complex8 : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1141:56
pub extern var ompi_mpi_complex16 : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1142:56
pub extern var ompi_mpi_complex32 : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1143:56
pub extern var ompi_mpi_int8_t : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1146:56
pub extern var ompi_mpi_uint8_t : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1147:56
pub extern var ompi_mpi_int16_t : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1148:56
pub extern var ompi_mpi_uint16_t : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1149:56
pub extern var ompi_mpi_int32_t : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1150:56
pub extern var ompi_mpi_uint32_t : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1151:56
pub extern var ompi_mpi_int64_t : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1152:56
pub extern var ompi_mpi_uint64_t : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1153:56
pub extern var ompi_mpi_aint : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1154:56
pub extern var ompi_mpi_offset : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1155:56
pub extern var ompi_mpi_count : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1156:56
pub extern var ompi_mpi_c_bool : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1157:56
pub extern var ompi_mpi_c_float_complex : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1158:56
pub extern var ompi_mpi_c_double_complex : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1159:56
pub extern var ompi_mpi_c_long_double_complex : struct_ompi_predefined_datatype_t; // /usr/include/mpi.h:1160:56
pub const struct_ompi_predefined_errhandler_t = opaque {};
pub extern var ompi_mpi_errhandler_null: struct_ompi_predefined_errhandler_t;
pub extern var ompi_mpi_errors_are_fatal : struct_ompi_predefined_errhandler_t; // /usr/include/mpi.h:1163:58
pub extern var ompi_mpi_errors_abort : struct_ompi_predefined_errhandler_t; // /usr/include/mpi.h:1164:58
pub extern var ompi_mpi_errors_return : struct_ompi_predefined_errhandler_t; // /usr/include/mpi.h:1165:58
pub const struct_ompi_predefined_win_t = opaque {};
pub extern var ompi_mpi_win_null: struct_ompi_predefined_win_t;
pub const struct_ompi_predefined_file_t = opaque {};
pub extern var ompi_mpi_file_null: struct_ompi_predefined_file_t;
pub const struct_ompi_predefined_info_t = opaque {};
pub extern var ompi_mpi_info_null: struct_ompi_predefined_info_t;
pub extern var ompi_mpi_info_env : struct_ompi_predefined_info_t; // /usr/include/mpi.h:1171:52
pub extern var MPI_F_STATUS_IGNORE: [*c]c_int;
pub extern var MPI_F_STATUSES_IGNORE: [*c]c_int;
pub extern var MPI_F08_STATUS_IGNORE: [*c]c_int;
pub extern var MPI_F08_STATUSES_IGNORE: [*c]c_int;
pub extern fn MPI_Abort(comm: MPI_Comm, errorcode: c_int) c_int;
pub extern fn MPI_Accumulate(origin_addr: ?*const anyopaque, origin_count: c_int, origin_datatype: MPI_Datatype, target_rank: c_int, target_disp: MPI_Aint, target_count: c_int, target_datatype: MPI_Datatype, op: MPI_Op, win: MPI_Win) c_int;
pub extern fn MPI_Add_error_class(errorclass: [*c]c_int) c_int;
pub extern fn MPI_Add_error_code(errorclass: c_int, errorcode: [*c]c_int) c_int;
pub extern fn MPI_Add_error_string(errorcode: c_int, string: [*c]const u8) c_int;
pub extern fn MPI_Allgather(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, comm: MPI_Comm) c_int;
pub extern fn MPI_Iallgather(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Allgather_init(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Allgatherv(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, displs: [*c]const c_int, recvtype: MPI_Datatype, comm: MPI_Comm) c_int;
pub extern fn MPI_Iallgatherv(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, displs: [*c]const c_int, recvtype: MPI_Datatype, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Allgatherv_init(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, displs: [*c]const c_int, recvtype: MPI_Datatype, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Alloc_mem(size: MPI_Aint, info: MPI_Info, baseptr: ?*anyopaque) c_int;
pub extern fn MPI_Allreduce(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm) c_int;
pub extern fn MPI_Iallreduce(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Allreduce_init(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Alltoall(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, comm: MPI_Comm) c_int;
pub extern fn MPI_Ialltoall(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Alltoall_init(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Alltoallv(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, sdispls: [*c]const c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, rdispls: [*c]const c_int, recvtype: MPI_Datatype, comm: MPI_Comm) c_int;
pub extern fn MPI_Ialltoallv(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, sdispls: [*c]const c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, rdispls: [*c]const c_int, recvtype: MPI_Datatype, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Alltoallv_init(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, sdispls: [*c]const c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, rdispls: [*c]const c_int, recvtype: MPI_Datatype, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Alltoallw(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, sdispls: [*c]const c_int, sendtypes: [*c]const MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, rdispls: [*c]const c_int, recvtypes: [*c]const MPI_Datatype, comm: MPI_Comm) c_int;
pub extern fn MPI_Ialltoallw(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, sdispls: [*c]const c_int, sendtypes: [*c]const MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, rdispls: [*c]const c_int, recvtypes: [*c]const MPI_Datatype, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Alltoallw_init(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, sdispls: [*c]const c_int, sendtypes: [*c]const MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, rdispls: [*c]const c_int, recvtypes: [*c]const MPI_Datatype, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Barrier(comm: MPI_Comm) c_int;
pub extern fn MPI_Ibarrier(comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Barrier_init(comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Bcast(buffer: ?*anyopaque, count: c_int, datatype: MPI_Datatype, root: c_int, comm: MPI_Comm) c_int;
pub extern fn MPI_Ibcast(buffer: ?*anyopaque, count: c_int, datatype: MPI_Datatype, root: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Bcast_init(buffer: ?*anyopaque, count: c_int, datatype: MPI_Datatype, root: c_int, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Bsend(buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm) c_int;
pub extern fn MPI_Bsend_init(buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Buffer_attach(buffer: ?*anyopaque, size: c_int) c_int;
pub extern fn MPI_Buffer_detach(buffer: ?*anyopaque, size: [*c]c_int) c_int;
pub extern fn MPI_Cancel(request: [*c]MPI_Request) c_int;
pub extern fn MPI_Cart_coords(comm: MPI_Comm, rank: c_int, maxdims: c_int, coords: [*c]c_int) c_int;
pub extern fn MPI_Cart_create(old_comm: MPI_Comm, ndims: c_int, dims: [*c]const c_int, periods: [*c]const c_int, reorder: c_int, comm_cart: [*c]MPI_Comm) c_int;
pub extern fn MPI_Cart_get(comm: MPI_Comm, maxdims: c_int, dims: [*c]c_int, periods: [*c]c_int, coords: [*c]c_int) c_int;
pub extern fn MPI_Cart_map(comm: MPI_Comm, ndims: c_int, dims: [*c]const c_int, periods: [*c]const c_int, newrank: [*c]c_int) c_int;
pub extern fn MPI_Cart_rank(comm: MPI_Comm, coords: [*c]const c_int, rank: [*c]c_int) c_int;
pub extern fn MPI_Cart_shift(comm: MPI_Comm, direction: c_int, disp: c_int, rank_source: [*c]c_int, rank_dest: [*c]c_int) c_int;
pub extern fn MPI_Cart_sub(comm: MPI_Comm, remain_dims: [*c]const c_int, new_comm: [*c]MPI_Comm) c_int;
pub extern fn MPI_Cartdim_get(comm: MPI_Comm, ndims: [*c]c_int) c_int;
pub extern fn MPI_Close_port(port_name: [*c]const u8) c_int;
pub extern fn MPI_Comm_accept(port_name: [*c]const u8, info: MPI_Info, root: c_int, comm: MPI_Comm, newcomm: [*c]MPI_Comm) c_int;
pub extern fn MPI_Comm_c2f(comm: MPI_Comm) c_int;
pub extern fn MPI_Comm_call_errhandler(comm: MPI_Comm, errorcode: c_int) c_int;
pub extern fn MPI_Comm_compare(comm1: MPI_Comm, comm2: MPI_Comm, result: [*c]c_int) c_int;
pub extern fn MPI_Comm_connect(port_name: [*c]const u8, info: MPI_Info, root: c_int, comm: MPI_Comm, newcomm: [*c]MPI_Comm) c_int;
pub extern fn MPI_Comm_create_errhandler(function: ?*const MPI_Comm_errhandler_function, errhandler: [*c]MPI_Errhandler) c_int;
pub extern fn MPI_Comm_create_keyval(comm_copy_attr_fn: ?*const MPI_Comm_copy_attr_function, comm_delete_attr_fn: ?*const MPI_Comm_delete_attr_function, comm_keyval: [*c]c_int, extra_state: ?*anyopaque) c_int;
pub extern fn MPI_Comm_create_group(comm: MPI_Comm, group: MPI_Group, tag: c_int, newcomm: [*c]MPI_Comm) c_int;
pub extern fn MPI_Comm_create_from_group(group: MPI_Group, tag: [*c]const u8, info: MPI_Info, errhandler: MPI_Errhandler, newcomm: [*c]MPI_Comm) c_int;
pub extern fn MPI_Comm_create(comm: MPI_Comm, group: MPI_Group, newcomm: [*c]MPI_Comm) c_int;
pub extern fn MPI_Comm_delete_attr(comm: MPI_Comm, comm_keyval: c_int) c_int;
pub extern fn MPI_Comm_disconnect(comm: [*c]MPI_Comm) c_int;
pub extern fn MPI_Comm_dup(comm: MPI_Comm, newcomm: [*c]MPI_Comm) c_int;
pub extern fn MPI_Comm_idup(comm: MPI_Comm, newcomm: [*c]MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Comm_dup_with_info(comm: MPI_Comm, info: MPI_Info, newcomm: [*c]MPI_Comm) c_int;
pub extern fn MPI_Comm_idup_with_info(comm: MPI_Comm, info: MPI_Info, newcomm: [*c]MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Comm_f2c(comm: c_int) MPI_Comm;
pub extern fn MPI_Comm_free_keyval(comm_keyval: [*c]c_int) c_int;
pub extern fn MPI_Comm_free(comm: [*c]MPI_Comm) c_int;
pub extern fn MPI_Comm_get_attr(comm: MPI_Comm, comm_keyval: c_int, attribute_val: ?*anyopaque, flag: [*c]c_int) c_int;
pub extern fn MPI_Dist_graph_create(comm_old: MPI_Comm, n: c_int, nodes: [*c]const c_int, degrees: [*c]const c_int, targets: [*c]const c_int, weights: [*c]const c_int, info: MPI_Info, reorder: c_int, newcomm: [*c]MPI_Comm) c_int;
pub extern fn MPI_Dist_graph_create_adjacent(comm_old: MPI_Comm, indegree: c_int, sources: [*c]const c_int, sourceweights: [*c]const c_int, outdegree: c_int, destinations: [*c]const c_int, destweights: [*c]const c_int, info: MPI_Info, reorder: c_int, comm_dist_graph: [*c]MPI_Comm) c_int;
pub extern fn MPI_Dist_graph_neighbors(comm: MPI_Comm, maxindegree: c_int, sources: [*c]c_int, sourceweights: [*c]c_int, maxoutdegree: c_int, destinations: [*c]c_int, destweights: [*c]c_int) c_int;
pub extern fn MPI_Dist_graph_neighbors_count(comm: MPI_Comm, inneighbors: [*c]c_int, outneighbors: [*c]c_int, weighted: [*c]c_int) c_int;
pub extern fn MPI_Comm_get_errhandler(comm: MPI_Comm, erhandler: [*c]MPI_Errhandler) c_int;
pub extern fn MPI_Comm_get_info(comm: MPI_Comm, info_used: [*c]MPI_Info) c_int;
pub extern fn MPI_Comm_get_name(comm: MPI_Comm, comm_name: [*c]u8, resultlen: [*c]c_int) c_int;
pub extern fn MPI_Comm_get_parent(parent: [*c]MPI_Comm) c_int;
pub extern fn MPI_Comm_group(comm: MPI_Comm, group: [*c]MPI_Group) c_int;
pub extern fn MPI_Comm_join(fd: c_int, intercomm: [*c]MPI_Comm) c_int;
pub extern fn MPI_Comm_rank(comm: MPI_Comm, rank: [*c]c_int) c_int;
pub extern fn MPI_Comm_remote_group(comm: MPI_Comm, group: [*c]MPI_Group) c_int;
pub extern fn MPI_Comm_remote_size(comm: MPI_Comm, size: [*c]c_int) c_int;
pub extern fn MPI_Comm_set_attr(comm: MPI_Comm, comm_keyval: c_int, attribute_val: ?*anyopaque) c_int;
pub extern fn MPI_Comm_set_errhandler(comm: MPI_Comm, errhandler: MPI_Errhandler) c_int;
pub extern fn MPI_Comm_set_info(comm: MPI_Comm, info: MPI_Info) c_int;
pub extern fn MPI_Comm_set_name(comm: MPI_Comm, comm_name: [*c]const u8) c_int;
pub extern fn MPI_Comm_size(comm: MPI_Comm, size: [*c]c_int) c_int;
pub extern fn MPI_Comm_spawn(command: [*c]const u8, argv: [*c][*c]u8, maxprocs: c_int, info: MPI_Info, root: c_int, comm: MPI_Comm, intercomm: [*c]MPI_Comm, array_of_errcodes: [*c]c_int) c_int;
pub extern fn MPI_Comm_spawn_multiple(count: c_int, array_of_commands: [*c][*c]u8, array_of_argv: [*c][*c][*c]u8, array_of_maxprocs: [*c]const c_int, array_of_info: [*c]const MPI_Info, root: c_int, comm: MPI_Comm, intercomm: [*c]MPI_Comm, array_of_errcodes: [*c]c_int) c_int;
pub extern fn MPI_Comm_split(comm: MPI_Comm, color: c_int, key: c_int, newcomm: [*c]MPI_Comm) c_int;
pub extern fn MPI_Comm_split_type(comm: MPI_Comm, split_type: c_int, key: c_int, info: MPI_Info, newcomm: [*c]MPI_Comm) c_int;
pub extern fn MPI_Comm_test_inter(comm: MPI_Comm, flag: [*c]c_int) c_int;
pub extern fn MPI_Compare_and_swap(origin_addr: ?*const anyopaque, compare_addr: ?*const anyopaque, result_addr: ?*anyopaque, datatype: MPI_Datatype, target_rank: c_int, target_disp: MPI_Aint, win: MPI_Win) c_int;
pub extern fn MPI_Dims_create(nnodes: c_int, ndims: c_int, dims: [*c]c_int) c_int;
pub extern fn MPI_Errhandler_c2f(errhandler: MPI_Errhandler) c_int;
pub extern fn MPI_Errhandler_f2c(errhandler: c_int) MPI_Errhandler;
pub extern fn MPI_Errhandler_free(errhandler: [*c]MPI_Errhandler) c_int;
pub extern fn MPI_Error_class(errorcode: c_int, errorclass: [*c]c_int) c_int;
pub extern fn MPI_Error_string(errorcode: c_int, string: [*c]u8, resultlen: [*c]c_int) c_int;
pub extern fn MPI_Exscan(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm) c_int;
pub extern fn MPI_Iexscan(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Exscan_init(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Fetch_and_op(origin_addr: ?*const anyopaque, result_addr: ?*anyopaque, datatype: MPI_Datatype, target_rank: c_int, target_disp: MPI_Aint, op: MPI_Op, win: MPI_Win) c_int;
pub extern fn MPI_File_c2f(file: MPI_File) c_int;
pub extern fn MPI_File_f2c(file: c_int) MPI_File;
pub extern fn MPI_File_call_errhandler(fh: MPI_File, errorcode: c_int) c_int;
pub extern fn MPI_File_create_errhandler(function: ?*const MPI_File_errhandler_function, errhandler: [*c]MPI_Errhandler) c_int;
pub extern fn MPI_File_set_errhandler(file: MPI_File, errhandler: MPI_Errhandler) c_int;
pub extern fn MPI_File_get_errhandler(file: MPI_File, errhandler: [*c]MPI_Errhandler) c_int;
pub extern fn MPI_File_open(comm: MPI_Comm, filename: [*c]const u8, amode: c_int, info: MPI_Info, fh: [*c]MPI_File) c_int;
pub extern fn MPI_File_close(fh: [*c]MPI_File) c_int;
pub extern fn MPI_File_delete(filename: [*c]const u8, info: MPI_Info) c_int;
pub extern fn MPI_File_set_size(fh: MPI_File, size: MPI_Offset) c_int;
pub extern fn MPI_File_preallocate(fh: MPI_File, size: MPI_Offset) c_int;
pub extern fn MPI_File_get_size(fh: MPI_File, size: [*c]MPI_Offset) c_int;
pub extern fn MPI_File_get_group(fh: MPI_File, group: [*c]MPI_Group) c_int;
pub extern fn MPI_File_get_amode(fh: MPI_File, amode: [*c]c_int) c_int;
pub extern fn MPI_File_set_info(fh: MPI_File, info: MPI_Info) c_int;
pub extern fn MPI_File_get_info(fh: MPI_File, info_used: [*c]MPI_Info) c_int;
pub extern fn MPI_File_set_view(fh: MPI_File, disp: MPI_Offset, etype: MPI_Datatype, filetype: MPI_Datatype, datarep: [*c]const u8, info: MPI_Info) c_int;
pub extern fn MPI_File_get_view(fh: MPI_File, disp: [*c]MPI_Offset, etype: [*c]MPI_Datatype, filetype: [*c]MPI_Datatype, datarep: [*c]u8) c_int;
pub extern fn MPI_File_read_at(fh: MPI_File, offset: MPI_Offset, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, status: [*c]MPI_Status) c_int;
pub extern fn MPI_File_read_at_all(fh: MPI_File, offset: MPI_Offset, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, status: [*c]MPI_Status) c_int;
pub extern fn MPI_File_write_at(fh: MPI_File, offset: MPI_Offset, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, status: [*c]MPI_Status) c_int;
pub extern fn MPI_File_write_at_all(fh: MPI_File, offset: MPI_Offset, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, status: [*c]MPI_Status) c_int;
pub extern fn MPI_File_iread_at(fh: MPI_File, offset: MPI_Offset, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, request: [*c]MPI_Request) c_int;
pub extern fn MPI_File_iwrite_at(fh: MPI_File, offset: MPI_Offset, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, request: [*c]MPI_Request) c_int;
pub extern fn MPI_File_iread_at_all(fh: MPI_File, offset: MPI_Offset, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, request: [*c]MPI_Request) c_int;
pub extern fn MPI_File_iwrite_at_all(fh: MPI_File, offset: MPI_Offset, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, request: [*c]MPI_Request) c_int;
pub extern fn MPI_File_read(fh: MPI_File, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, status: [*c]MPI_Status) c_int;
pub extern fn MPI_File_read_all(fh: MPI_File, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, status: [*c]MPI_Status) c_int;
pub extern fn MPI_File_write(fh: MPI_File, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, status: [*c]MPI_Status) c_int;
pub extern fn MPI_File_write_all(fh: MPI_File, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, status: [*c]MPI_Status) c_int;
pub extern fn MPI_File_iread(fh: MPI_File, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, request: [*c]MPI_Request) c_int;
pub extern fn MPI_File_iwrite(fh: MPI_File, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, request: [*c]MPI_Request) c_int;
pub extern fn MPI_File_iread_all(fh: MPI_File, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, request: [*c]MPI_Request) c_int;
pub extern fn MPI_File_iwrite_all(fh: MPI_File, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, request: [*c]MPI_Request) c_int;
pub extern fn MPI_File_seek(fh: MPI_File, offset: MPI_Offset, whence: c_int) c_int;
pub extern fn MPI_File_get_position(fh: MPI_File, offset: [*c]MPI_Offset) c_int;
pub extern fn MPI_File_get_byte_offset(fh: MPI_File, offset: MPI_Offset, disp: [*c]MPI_Offset) c_int;
pub extern fn MPI_File_read_shared(fh: MPI_File, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, status: [*c]MPI_Status) c_int;
pub extern fn MPI_File_write_shared(fh: MPI_File, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, status: [*c]MPI_Status) c_int;
pub extern fn MPI_File_iread_shared(fh: MPI_File, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, request: [*c]MPI_Request) c_int;
pub extern fn MPI_File_iwrite_shared(fh: MPI_File, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, request: [*c]MPI_Request) c_int;
pub extern fn MPI_File_read_ordered(fh: MPI_File, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, status: [*c]MPI_Status) c_int;
pub extern fn MPI_File_write_ordered(fh: MPI_File, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, status: [*c]MPI_Status) c_int;
pub extern fn MPI_File_seek_shared(fh: MPI_File, offset: MPI_Offset, whence: c_int) c_int;
pub extern fn MPI_File_get_position_shared(fh: MPI_File, offset: [*c]MPI_Offset) c_int;
pub extern fn MPI_File_read_at_all_begin(fh: MPI_File, offset: MPI_Offset, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype) c_int;
pub extern fn MPI_File_read_at_all_end(fh: MPI_File, buf: ?*anyopaque, status: [*c]MPI_Status) c_int;
pub extern fn MPI_File_write_at_all_begin(fh: MPI_File, offset: MPI_Offset, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype) c_int;
pub extern fn MPI_File_write_at_all_end(fh: MPI_File, buf: ?*const anyopaque, status: [*c]MPI_Status) c_int;
pub extern fn MPI_File_read_all_begin(fh: MPI_File, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype) c_int;
pub extern fn MPI_File_read_all_end(fh: MPI_File, buf: ?*anyopaque, status: [*c]MPI_Status) c_int;
pub extern fn MPI_File_write_all_begin(fh: MPI_File, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype) c_int;
pub extern fn MPI_File_write_all_end(fh: MPI_File, buf: ?*const anyopaque, status: [*c]MPI_Status) c_int;
pub extern fn MPI_File_read_ordered_begin(fh: MPI_File, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype) c_int;
pub extern fn MPI_File_read_ordered_end(fh: MPI_File, buf: ?*anyopaque, status: [*c]MPI_Status) c_int;
pub extern fn MPI_File_write_ordered_begin(fh: MPI_File, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype) c_int;
pub extern fn MPI_File_write_ordered_end(fh: MPI_File, buf: ?*const anyopaque, status: [*c]MPI_Status) c_int;
pub extern fn MPI_File_get_type_extent(fh: MPI_File, datatype: MPI_Datatype, extent: [*c]MPI_Aint) c_int;
pub extern fn MPI_File_set_atomicity(fh: MPI_File, flag: c_int) c_int;
pub extern fn MPI_File_get_atomicity(fh: MPI_File, flag: [*c]c_int) c_int;
pub extern fn MPI_File_sync(fh: MPI_File) c_int;
pub extern fn MPI_Finalize() c_int;
pub extern fn MPI_Finalized(flag: [*c]c_int) c_int;
pub extern fn MPI_Free_mem(base: ?*anyopaque) c_int;
pub extern fn MPI_Gather(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, root: c_int, comm: MPI_Comm) c_int;
pub extern fn MPI_Igather(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, root: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Gather_init(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, root: c_int, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Gatherv(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, displs: [*c]const c_int, recvtype: MPI_Datatype, root: c_int, comm: MPI_Comm) c_int;
pub extern fn MPI_Igatherv(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, displs: [*c]const c_int, recvtype: MPI_Datatype, root: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Gatherv_init(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, displs: [*c]const c_int, recvtype: MPI_Datatype, root: c_int, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Get_address(location: ?*const anyopaque, address: [*c]MPI_Aint) c_int;
pub extern fn MPI_Get_count(status: [*c]const MPI_Status, datatype: MPI_Datatype, count: [*c]c_int) c_int;
pub extern fn MPI_Get_elements(status: [*c]const MPI_Status, datatype: MPI_Datatype, count: [*c]c_int) c_int;
pub extern fn MPI_Get_elements_x(status: [*c]const MPI_Status, datatype: MPI_Datatype, count: [*c]MPI_Count) c_int;
pub extern fn MPI_Get(origin_addr: ?*anyopaque, origin_count: c_int, origin_datatype: MPI_Datatype, target_rank: c_int, target_disp: MPI_Aint, target_count: c_int, target_datatype: MPI_Datatype, win: MPI_Win) c_int;
pub extern fn MPI_Get_accumulate(origin_addr: ?*const anyopaque, origin_count: c_int, origin_datatype: MPI_Datatype, result_addr: ?*anyopaque, result_count: c_int, result_datatype: MPI_Datatype, target_rank: c_int, target_disp: MPI_Aint, target_count: c_int, target_datatype: MPI_Datatype, op: MPI_Op, win: MPI_Win) c_int;
pub extern fn MPI_Get_library_version(version: [*c]u8, resultlen: [*c]c_int) c_int;
pub extern fn MPI_Get_processor_name(name: [*c]u8, resultlen: [*c]c_int) c_int;
pub extern fn MPI_Get_version(version: [*c]c_int, subversion: [*c]c_int) c_int;
pub extern fn MPI_Graph_create(comm_old: MPI_Comm, nnodes: c_int, index: [*c]const c_int, edges: [*c]const c_int, reorder: c_int, comm_graph: [*c]MPI_Comm) c_int;
pub extern fn MPI_Graph_get(comm: MPI_Comm, maxindex: c_int, maxedges: c_int, index: [*c]c_int, edges: [*c]c_int) c_int;
pub extern fn MPI_Graph_map(comm: MPI_Comm, nnodes: c_int, index: [*c]const c_int, edges: [*c]const c_int, newrank: [*c]c_int) c_int;
pub extern fn MPI_Graph_neighbors_count(comm: MPI_Comm, rank: c_int, nneighbors: [*c]c_int) c_int;
pub extern fn MPI_Graph_neighbors(comm: MPI_Comm, rank: c_int, maxneighbors: c_int, neighbors: [*c]c_int) c_int;
pub extern fn MPI_Graphdims_get(comm: MPI_Comm, nnodes: [*c]c_int, nedges: [*c]c_int) c_int;
pub extern fn MPI_Grequest_complete(request: MPI_Request) c_int;
pub extern fn MPI_Grequest_start(query_fn: ?*const MPI_Grequest_query_function, free_fn: ?*const MPI_Grequest_free_function, cancel_fn: ?*const MPI_Grequest_cancel_function, extra_state: ?*anyopaque, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Group_c2f(group: MPI_Group) c_int;
pub extern fn MPI_Group_compare(group1: MPI_Group, group2: MPI_Group, result: [*c]c_int) c_int;
pub extern fn MPI_Group_difference(group1: MPI_Group, group2: MPI_Group, newgroup: [*c]MPI_Group) c_int;
pub extern fn MPI_Group_excl(group: MPI_Group, n: c_int, ranks: [*c]const c_int, newgroup: [*c]MPI_Group) c_int;
pub extern fn MPI_Group_f2c(group: c_int) MPI_Group;
pub extern fn MPI_Group_free(group: [*c]MPI_Group) c_int;
pub extern fn MPI_Group_from_session_pset(session: MPI_Session, pset_name: [*c]const u8, newgroup: [*c]MPI_Group) c_int;
pub extern fn MPI_Group_incl(group: MPI_Group, n: c_int, ranks: [*c]const c_int, newgroup: [*c]MPI_Group) c_int;
pub extern fn MPI_Group_intersection(group1: MPI_Group, group2: MPI_Group, newgroup: [*c]MPI_Group) c_int;
pub extern fn MPI_Group_range_excl(group: MPI_Group, n: c_int, ranges: [*c][3]c_int, newgroup: [*c]MPI_Group) c_int;
pub extern fn MPI_Group_range_incl(group: MPI_Group, n: c_int, ranges: [*c][3]c_int, newgroup: [*c]MPI_Group) c_int;
pub extern fn MPI_Group_rank(group: MPI_Group, rank: [*c]c_int) c_int;
pub extern fn MPI_Group_size(group: MPI_Group, size: [*c]c_int) c_int;
pub extern fn MPI_Group_translate_ranks(group1: MPI_Group, n: c_int, ranks1: [*c]const c_int, group2: MPI_Group, ranks2: [*c]c_int) c_int;
pub extern fn MPI_Group_union(group1: MPI_Group, group2: MPI_Group, newgroup: [*c]MPI_Group) c_int;
pub extern fn MPI_Ibsend(buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Improbe(source: c_int, tag: c_int, comm: MPI_Comm, flag: [*c]c_int, message: [*c]MPI_Message, status: [*c]MPI_Status) c_int;
pub extern fn MPI_Imrecv(buf: ?*anyopaque, count: c_int, @"type": MPI_Datatype, message: [*c]MPI_Message, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Info_c2f(info: MPI_Info) c_int;
pub extern fn MPI_Info_create(info: [*c]MPI_Info) c_int;
pub extern fn MPI_Info_create_env(argc: c_int, argv: [*c][*c]u8, info: [*c]MPI_Info) c_int;
pub extern fn MPI_Info_delete(info: MPI_Info, key: [*c]const u8) c_int;
pub extern fn MPI_Info_dup(info: MPI_Info, newinfo: [*c]MPI_Info) c_int;
pub extern fn MPI_Info_f2c(info: c_int) MPI_Info;
pub extern fn MPI_Info_free(info: [*c]MPI_Info) c_int;
pub extern fn MPI_Info_get(info: MPI_Info, key: [*c]const u8, valuelen: c_int, value: [*c]u8, flag: [*c]c_int) c_int;
pub extern fn MPI_Info_get_nkeys(info: MPI_Info, nkeys: [*c]c_int) c_int;
pub extern fn MPI_Info_get_nthkey(info: MPI_Info, n: c_int, key: [*c]u8) c_int;
pub extern fn MPI_Info_get_string(info: MPI_Info, key: [*c]const u8, buflen: [*c]c_int, value: [*c]u8, flag: [*c]c_int) c_int;
pub extern fn MPI_Info_get_valuelen(info: MPI_Info, key: [*c]const u8, valuelen: [*c]c_int, flag: [*c]c_int) c_int;
pub extern fn MPI_Info_set(info: MPI_Info, key: [*c]const u8, value: [*c]const u8) c_int;
pub extern fn MPI_Init(argc: [*c]c_int, argv: [*c][*c][*c]u8) c_int;
pub extern fn MPI_Initialized(flag: [*c]c_int) c_int;
pub extern fn MPI_Init_thread(argc: [*c]c_int, argv: [*c][*c][*c]u8, required: c_int, provided: [*c]c_int) c_int;
pub extern fn MPI_Intercomm_create(local_comm: MPI_Comm, local_leader: c_int, bridge_comm: MPI_Comm, remote_leader: c_int, tag: c_int, newintercomm: [*c]MPI_Comm) c_int;
pub extern fn MPI_Intercomm_create_from_groups(local_group: MPI_Group, local_leader: c_int, remote_group: MPI_Group, remote_leader: c_int, tag: [*c]const u8, info: MPI_Info, errhandler: MPI_Errhandler, newintercomm: [*c]MPI_Comm) c_int;
pub extern fn MPI_Intercomm_merge(intercomm: MPI_Comm, high: c_int, newintracomm: [*c]MPI_Comm) c_int;
pub extern fn MPI_Iprobe(source: c_int, tag: c_int, comm: MPI_Comm, flag: [*c]c_int, status: [*c]MPI_Status) c_int;
pub extern fn MPI_Irecv(buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, source: c_int, tag: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Irsend(buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Isend(buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Isendrecv(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, dest: c_int, sendtag: c_int, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, source: c_int, recvtag: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Isendrecv_replace(buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, sendtag: c_int, source: c_int, recvtag: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Issend(buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Is_thread_main(flag: [*c]c_int) c_int;
pub extern fn MPI_Lookup_name(service_name: [*c]const u8, info: MPI_Info, port_name: [*c]u8) c_int;
pub extern fn MPI_Message_c2f(message: MPI_Message) c_int;
pub extern fn MPI_Message_f2c(message: c_int) MPI_Message;
pub extern fn MPI_Mprobe(source: c_int, tag: c_int, comm: MPI_Comm, message: [*c]MPI_Message, status: [*c]MPI_Status) c_int;
pub extern fn MPI_Mrecv(buf: ?*anyopaque, count: c_int, @"type": MPI_Datatype, message: [*c]MPI_Message, status: [*c]MPI_Status) c_int;
pub extern fn MPI_Neighbor_allgather(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, comm: MPI_Comm) c_int;
pub extern fn MPI_Ineighbor_allgather(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Neighbor_allgatherv(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, displs: [*c]const c_int, recvtype: MPI_Datatype, comm: MPI_Comm) c_int;
pub extern fn MPI_Neighbor_allgather_init(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Ineighbor_allgatherv(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, displs: [*c]const c_int, recvtype: MPI_Datatype, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Neighbor_allgatherv_init(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, displs: [*c]const c_int, recvtype: MPI_Datatype, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Neighbor_alltoall(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, comm: MPI_Comm) c_int;
pub extern fn MPI_Ineighbor_alltoall(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Neighbor_alltoall_init(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Neighbor_alltoallv(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, sdispls: [*c]const c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, rdispls: [*c]const c_int, recvtype: MPI_Datatype, comm: MPI_Comm) c_int;
pub extern fn MPI_Ineighbor_alltoallv(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, sdispls: [*c]const c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, rdispls: [*c]const c_int, recvtype: MPI_Datatype, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Neighbor_alltoallv_init(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, sdispls: [*c]const c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, rdispls: [*c]const c_int, recvtype: MPI_Datatype, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Neighbor_alltoallw(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, sdispls: [*c]const MPI_Aint, sendtypes: [*c]const MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, rdispls: [*c]const MPI_Aint, recvtypes: [*c]const MPI_Datatype, comm: MPI_Comm) c_int;
pub extern fn MPI_Ineighbor_alltoallw(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, sdispls: [*c]const MPI_Aint, sendtypes: [*c]const MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, rdispls: [*c]const MPI_Aint, recvtypes: [*c]const MPI_Datatype, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Neighbor_alltoallw_init(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, sdispls: [*c]const MPI_Aint, sendtypes: [*c]const MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, rdispls: [*c]const MPI_Aint, recvtypes: [*c]const MPI_Datatype, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Op_c2f(op: MPI_Op) c_int;
pub extern fn MPI_Op_commutative(op: MPI_Op, commute: [*c]c_int) c_int;
pub extern fn MPI_Op_create(function: ?*const MPI_User_function, commute: c_int, op: [*c]MPI_Op) c_int;
pub extern fn MPI_Open_port(info: MPI_Info, port_name: [*c]u8) c_int;
pub extern fn MPI_Op_f2c(op: c_int) MPI_Op;
pub extern fn MPI_Op_free(op: [*c]MPI_Op) c_int;
pub extern fn MPI_Pack_external(datarep: [*c]const u8, inbuf: ?*const anyopaque, incount: c_int, datatype: MPI_Datatype, outbuf: ?*anyopaque, outsize: MPI_Aint, position: [*c]MPI_Aint) c_int;
pub extern fn MPI_Pack_external_size(datarep: [*c]const u8, incount: c_int, datatype: MPI_Datatype, size: [*c]MPI_Aint) c_int;
pub extern fn MPI_Pack(inbuf: ?*const anyopaque, incount: c_int, datatype: MPI_Datatype, outbuf: ?*anyopaque, outsize: c_int, position: [*c]c_int, comm: MPI_Comm) c_int;
pub extern fn MPI_Pack_size(incount: c_int, datatype: MPI_Datatype, comm: MPI_Comm, size: [*c]c_int) c_int;
pub extern fn MPI_Parrived(request: MPI_Request, partition: c_int, flag: [*c]c_int) c_int;
pub extern fn MPI_Pcontrol(level: c_int, ...) c_int;
pub extern fn MPI_Pready(partitions: c_int, request: MPI_Request) c_int;
pub extern fn MPI_Pready_range(partition_low: c_int, partition_high: c_int, request: MPI_Request) c_int;
pub extern fn MPI_Pready_list(length: c_int, partition_list: [*c]c_int, request: MPI_Request) c_int;
pub extern fn MPI_Precv_init(buf: ?*anyopaque, partitions: c_int, count: MPI_Count, datatype: MPI_Datatype, source: c_int, tag: c_int, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Probe(source: c_int, tag: c_int, comm: MPI_Comm, status: [*c]MPI_Status) c_int;
pub extern fn MPI_Psend_init(buf: ?*const anyopaque, partitions: c_int, count: MPI_Count, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Publish_name(service_name: [*c]const u8, info: MPI_Info, port_name: [*c]const u8) c_int;
pub extern fn MPI_Put(origin_addr: ?*const anyopaque, origin_count: c_int, origin_datatype: MPI_Datatype, target_rank: c_int, target_disp: MPI_Aint, target_count: c_int, target_datatype: MPI_Datatype, win: MPI_Win) c_int;
pub extern fn MPI_Query_thread(provided: [*c]c_int) c_int;
pub extern fn MPI_Raccumulate(origin_addr: ?*const anyopaque, origin_count: c_int, origin_datatype: MPI_Datatype, target_rank: c_int, target_disp: MPI_Aint, target_count: c_int, target_datatype: MPI_Datatype, op: MPI_Op, win: MPI_Win, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Recv_init(buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, source: c_int, tag: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Recv(buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, source: c_int, tag: c_int, comm: MPI_Comm, status: [*c]MPI_Status) c_int;
pub extern fn MPI_Reduce(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op, root: c_int, comm: MPI_Comm) c_int;
pub extern fn MPI_Ireduce(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op, root: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Reduce_init(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op, root: c_int, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Reduce_local(inbuf: ?*const anyopaque, inoutbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op) c_int;
pub extern fn MPI_Reduce_scatter(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm) c_int;
pub extern fn MPI_Ireduce_scatter(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Reduce_scatter_init(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Reduce_scatter_block(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, recvcount: c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm) c_int;
pub extern fn MPI_Ireduce_scatter_block(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, recvcount: c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Reduce_scatter_block_init(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, recvcount: c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Register_datarep(datarep: [*c]const u8, read_conversion_fn: ?*const MPI_Datarep_conversion_function, write_conversion_fn: ?*const MPI_Datarep_conversion_function, dtype_file_extent_fn: ?*const MPI_Datarep_extent_function, extra_state: ?*anyopaque) c_int;
pub extern fn MPI_Request_c2f(request: MPI_Request) c_int;
pub extern fn MPI_Request_f2c(request: c_int) MPI_Request;
pub extern fn MPI_Request_free(request: [*c]MPI_Request) c_int;
pub extern fn MPI_Request_get_status(request: MPI_Request, flag: [*c]c_int, status: [*c]MPI_Status) c_int;
pub extern fn MPI_Rget(origin_addr: ?*anyopaque, origin_count: c_int, origin_datatype: MPI_Datatype, target_rank: c_int, target_disp: MPI_Aint, target_count: c_int, target_datatype: MPI_Datatype, win: MPI_Win, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Rget_accumulate(origin_addr: ?*const anyopaque, origin_count: c_int, origin_datatype: MPI_Datatype, result_addr: ?*anyopaque, result_count: c_int, result_datatype: MPI_Datatype, target_rank: c_int, target_disp: MPI_Aint, target_count: c_int, target_datatype: MPI_Datatype, op: MPI_Op, win: MPI_Win, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Rput(origin_addr: ?*const anyopaque, origin_count: c_int, origin_datatype: MPI_Datatype, target_rank: c_int, target_disp: MPI_Aint, target_cout: c_int, target_datatype: MPI_Datatype, win: MPI_Win, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Rsend(ibuf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm) c_int;
pub extern fn MPI_Rsend_init(buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Scan(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm) c_int;
pub extern fn MPI_Iscan(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Scan_init(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Scatter(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, root: c_int, comm: MPI_Comm) c_int;
pub extern fn MPI_Iscatter(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, root: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Scatter_init(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, root: c_int, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Scatterv(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, displs: [*c]const c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, root: c_int, comm: MPI_Comm) c_int;
pub extern fn MPI_Iscatterv(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, displs: [*c]const c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, root: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Scatterv_init(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, displs: [*c]const c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, root: c_int, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Send_init(buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Send(buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm) c_int;
pub extern fn MPI_Sendrecv(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, dest: c_int, sendtag: c_int, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, source: c_int, recvtag: c_int, comm: MPI_Comm, status: [*c]MPI_Status) c_int;
pub extern fn MPI_Sendrecv_replace(buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, sendtag: c_int, source: c_int, recvtag: c_int, comm: MPI_Comm, status: [*c]MPI_Status) c_int;
pub extern fn MPI_Session_c2f(session: MPI_Session) c_int;
pub extern fn MPI_Session_call_errhandler(session: MPI_Session, errorcode: c_int) c_int;
pub extern fn MPI_Session_create_errhandler(session_errhandler_fn: ?*const MPI_Session_errhandler_function, errhandler: [*c]MPI_Errhandler) c_int;
pub extern fn MPI_Session_finalize(session: [*c]MPI_Session) c_int;
pub extern fn MPI_Session_get_errhandler(session: MPI_Session, erhandler: [*c]MPI_Errhandler) c_int;
pub extern fn MPI_Session_get_info(session: MPI_Session, info_used: [*c]MPI_Info) c_int;
pub extern fn MPI_Session_get_num_psets(session: MPI_Session, info: MPI_Info, npset_names: [*c]c_int) c_int;
pub extern fn MPI_Session_get_nth_pset(session: MPI_Session, info: MPI_Info, n: c_int, len: [*c]c_int, pset_name: [*c]u8) c_int;
pub extern fn MPI_Session_get_pset_info(session: MPI_Session, pset_name: [*c]const u8, info_used: [*c]MPI_Info) c_int;
pub extern fn MPI_Session_init(info: MPI_Info, errhandler: MPI_Errhandler, session: [*c]MPI_Session) c_int;
pub extern fn MPI_Session_f2c(session: c_int) MPI_Session;
pub extern fn MPI_Session_set_errhandler(session: MPI_Session, errhandler: MPI_Errhandler) c_int;
pub extern fn MPI_Session_set_info(session: MPI_Session, info: MPI_Info) c_int;
pub extern fn MPI_Ssend_init(buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn MPI_Ssend(buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm) c_int;
pub extern fn MPI_Start(request: [*c]MPI_Request) c_int;
pub extern fn MPI_Startall(count: c_int, array_of_requests: [*c]MPI_Request) c_int;
pub extern fn MPI_Status_c2f(c_status: [*c]const MPI_Status, f_status: [*c]c_int) c_int;
pub extern fn MPI_Status_c2f08(c_status: [*c]const MPI_Status, f08_status: [*c]MPI_F08_status) c_int;
pub extern fn MPI_Status_f082c(f08_status: [*c]const MPI_F08_status, c_status: [*c]MPI_Status) c_int;
pub extern fn MPI_Status_f082f(f08_status: [*c]const MPI_F08_status, f_status: [*c]c_int) c_int;
pub extern fn MPI_Status_f2c(f_status: [*c]const c_int, c_status: [*c]MPI_Status) c_int;
pub extern fn MPI_Status_f2f08(f_status: [*c]const c_int, f08_status: [*c]MPI_F08_status) c_int;
pub extern fn MPI_Status_set_cancelled(status: [*c]MPI_Status, flag: c_int) c_int;
pub extern fn MPI_Status_set_elements(status: [*c]MPI_Status, datatype: MPI_Datatype, count: c_int) c_int;
pub extern fn MPI_Status_set_elements_x(status: [*c]MPI_Status, datatype: MPI_Datatype, count: MPI_Count) c_int;
pub extern fn MPI_Testall(count: c_int, array_of_requests: [*c]MPI_Request, flag: [*c]c_int, array_of_statuses: [*c]MPI_Status) c_int;
pub extern fn MPI_Testany(count: c_int, array_of_requests: [*c]MPI_Request, index: [*c]c_int, flag: [*c]c_int, status: [*c]MPI_Status) c_int;
pub extern fn MPI_Test(request: [*c]MPI_Request, flag: [*c]c_int, status: [*c]MPI_Status) c_int;
pub extern fn MPI_Test_cancelled(status: [*c]const MPI_Status, flag: [*c]c_int) c_int;
pub extern fn MPI_Testsome(incount: c_int, array_of_requests: [*c]MPI_Request, outcount: [*c]c_int, array_of_indices: [*c]c_int, array_of_statuses: [*c]MPI_Status) c_int;
pub extern fn MPI_Topo_test(comm: MPI_Comm, status: [*c]c_int) c_int;
pub extern fn MPI_Type_c2f(datatype: MPI_Datatype) c_int;
pub extern fn MPI_Type_commit(@"type": [*c]MPI_Datatype) c_int;
pub extern fn MPI_Type_contiguous(count: c_int, oldtype: MPI_Datatype, newtype: [*c]MPI_Datatype) c_int;
pub extern fn MPI_Type_create_darray(size: c_int, rank: c_int, ndims: c_int, gsize_array: [*c]const c_int, distrib_array: [*c]const c_int, darg_array: [*c]const c_int, psize_array: [*c]const c_int, order: c_int, oldtype: MPI_Datatype, newtype: [*c]MPI_Datatype) c_int;
pub extern fn MPI_Type_create_f90_complex(p: c_int, r: c_int, newtype: [*c]MPI_Datatype) c_int;
pub extern fn MPI_Type_create_f90_integer(r: c_int, newtype: [*c]MPI_Datatype) c_int;
pub extern fn MPI_Type_create_f90_real(p: c_int, r: c_int, newtype: [*c]MPI_Datatype) c_int;
pub extern fn MPI_Type_create_hindexed_block(count: c_int, blocklength: c_int, array_of_displacements: [*c]const MPI_Aint, oldtype: MPI_Datatype, newtype: [*c]MPI_Datatype) c_int;
pub extern fn MPI_Type_create_hindexed(count: c_int, array_of_blocklengths: [*c]const c_int, array_of_displacements: [*c]const MPI_Aint, oldtype: MPI_Datatype, newtype: [*c]MPI_Datatype) c_int;
pub extern fn MPI_Type_create_hvector(count: c_int, blocklength: c_int, stride: MPI_Aint, oldtype: MPI_Datatype, newtype: [*c]MPI_Datatype) c_int;
pub extern fn MPI_Type_create_keyval(type_copy_attr_fn: ?*const MPI_Type_copy_attr_function, type_delete_attr_fn: ?*const MPI_Type_delete_attr_function, type_keyval: [*c]c_int, extra_state: ?*anyopaque) c_int;
pub extern fn MPI_Type_create_indexed_block(count: c_int, blocklength: c_int, array_of_displacements: [*c]const c_int, oldtype: MPI_Datatype, newtype: [*c]MPI_Datatype) c_int;
pub extern fn MPI_Type_create_struct(count: c_int, array_of_block_lengths: [*c]const c_int, array_of_displacements: [*c]const MPI_Aint, array_of_types: [*c]const MPI_Datatype, newtype: [*c]MPI_Datatype) c_int;
pub extern fn MPI_Type_create_subarray(ndims: c_int, size_array: [*c]const c_int, subsize_array: [*c]const c_int, start_array: [*c]const c_int, order: c_int, oldtype: MPI_Datatype, newtype: [*c]MPI_Datatype) c_int;
pub extern fn MPI_Type_create_resized(oldtype: MPI_Datatype, lb: MPI_Aint, extent: MPI_Aint, newtype: [*c]MPI_Datatype) c_int;
pub extern fn MPI_Type_delete_attr(@"type": MPI_Datatype, type_keyval: c_int) c_int;
pub extern fn MPI_Type_dup(@"type": MPI_Datatype, newtype: [*c]MPI_Datatype) c_int;
pub extern fn MPI_Type_free(@"type": [*c]MPI_Datatype) c_int;
pub extern fn MPI_Type_free_keyval(type_keyval: [*c]c_int) c_int;
pub extern fn MPI_Type_f2c(datatype: c_int) MPI_Datatype;
pub extern fn MPI_Type_get_attr(@"type": MPI_Datatype, type_keyval: c_int, attribute_val: ?*anyopaque, flag: [*c]c_int) c_int;
pub extern fn MPI_Type_get_contents(mtype: MPI_Datatype, max_integers: c_int, max_addresses: c_int, max_datatypes: c_int, array_of_integers: [*c]c_int, array_of_addresses: [*c]MPI_Aint, array_of_datatypes: [*c]MPI_Datatype) c_int;
pub extern fn MPI_Type_get_envelope(@"type": MPI_Datatype, num_integers: [*c]c_int, num_addresses: [*c]c_int, num_datatypes: [*c]c_int, combiner: [*c]c_int) c_int;
pub extern fn MPI_Type_get_extent(@"type": MPI_Datatype, lb: [*c]MPI_Aint, extent: [*c]MPI_Aint) c_int;
pub extern fn MPI_Type_get_extent_x(@"type": MPI_Datatype, lb: [*c]MPI_Count, extent: [*c]MPI_Count) c_int;
pub extern fn MPI_Type_get_name(@"type": MPI_Datatype, type_name: [*c]u8, resultlen: [*c]c_int) c_int;
pub extern fn MPI_Type_get_true_extent(datatype: MPI_Datatype, true_lb: [*c]MPI_Aint, true_extent: [*c]MPI_Aint) c_int;
pub extern fn MPI_Type_get_true_extent_x(datatype: MPI_Datatype, true_lb: [*c]MPI_Count, true_extent: [*c]MPI_Count) c_int;
pub extern fn MPI_Type_indexed(count: c_int, array_of_blocklengths: [*c]const c_int, array_of_displacements: [*c]const c_int, oldtype: MPI_Datatype, newtype: [*c]MPI_Datatype) c_int;
pub extern fn MPI_Type_match_size(typeclass: c_int, size: c_int, @"type": [*c]MPI_Datatype) c_int;
pub extern fn MPI_Type_set_attr(@"type": MPI_Datatype, type_keyval: c_int, attr_val: ?*anyopaque) c_int;
pub extern fn MPI_Type_set_name(@"type": MPI_Datatype, type_name: [*c]const u8) c_int;
pub extern fn MPI_Type_size(@"type": MPI_Datatype, size: [*c]c_int) c_int;
pub extern fn MPI_Type_size_x(@"type": MPI_Datatype, size: [*c]MPI_Count) c_int;
pub extern fn MPI_Type_vector(count: c_int, blocklength: c_int, stride: c_int, oldtype: MPI_Datatype, newtype: [*c]MPI_Datatype) c_int;
pub extern fn MPI_Unpack(inbuf: ?*const anyopaque, insize: c_int, position: [*c]c_int, outbuf: ?*anyopaque, outcount: c_int, datatype: MPI_Datatype, comm: MPI_Comm) c_int;
pub extern fn MPI_Unpublish_name(service_name: [*c]const u8, info: MPI_Info, port_name: [*c]const u8) c_int;
pub extern fn MPI_Unpack_external(datarep: [*c]const u8, inbuf: ?*const anyopaque, insize: MPI_Aint, position: [*c]MPI_Aint, outbuf: ?*anyopaque, outcount: c_int, datatype: MPI_Datatype) c_int;
pub extern fn MPI_Waitall(count: c_int, array_of_requests: [*c]MPI_Request, array_of_statuses: [*c]MPI_Status) c_int;
pub extern fn MPI_Waitany(count: c_int, array_of_requests: [*c]MPI_Request, index: [*c]c_int, status: [*c]MPI_Status) c_int;
pub extern fn MPI_Wait(request: [*c]MPI_Request, status: [*c]MPI_Status) c_int;
pub extern fn MPI_Waitsome(incount: c_int, array_of_requests: [*c]MPI_Request, outcount: [*c]c_int, array_of_indices: [*c]c_int, array_of_statuses: [*c]MPI_Status) c_int;
pub extern fn MPI_Win_allocate(size: MPI_Aint, disp_unit: c_int, info: MPI_Info, comm: MPI_Comm, baseptr: ?*anyopaque, win: [*c]MPI_Win) c_int;
pub extern fn MPI_Win_allocate_shared(size: MPI_Aint, disp_unit: c_int, info: MPI_Info, comm: MPI_Comm, baseptr: ?*anyopaque, win: [*c]MPI_Win) c_int;
pub extern fn MPI_Win_attach(win: MPI_Win, base: ?*anyopaque, size: MPI_Aint) c_int;
pub extern fn MPI_Win_c2f(win: MPI_Win) c_int;
pub extern fn MPI_Win_call_errhandler(win: MPI_Win, errorcode: c_int) c_int;
pub extern fn MPI_Win_complete(win: MPI_Win) c_int;
pub extern fn MPI_Win_create(base: ?*anyopaque, size: MPI_Aint, disp_unit: c_int, info: MPI_Info, comm: MPI_Comm, win: [*c]MPI_Win) c_int;
pub extern fn MPI_Win_create_dynamic(info: MPI_Info, comm: MPI_Comm, win: [*c]MPI_Win) c_int;
pub extern fn MPI_Win_create_errhandler(function: ?*const MPI_Win_errhandler_function, errhandler: [*c]MPI_Errhandler) c_int;
pub extern fn MPI_Win_create_keyval(win_copy_attr_fn: ?*const MPI_Win_copy_attr_function, win_delete_attr_fn: ?*const MPI_Win_delete_attr_function, win_keyval: [*c]c_int, extra_state: ?*anyopaque) c_int;
pub extern fn MPI_Win_delete_attr(win: MPI_Win, win_keyval: c_int) c_int;
pub extern fn MPI_Win_detach(win: MPI_Win, base: ?*const anyopaque) c_int;
pub extern fn MPI_Win_f2c(win: c_int) MPI_Win;
pub extern fn MPI_Win_fence(mpi_assert: c_int, win: MPI_Win) c_int;
pub extern fn MPI_Win_flush(rank: c_int, win: MPI_Win) c_int;
pub extern fn MPI_Win_flush_all(win: MPI_Win) c_int;
pub extern fn MPI_Win_flush_local(rank: c_int, win: MPI_Win) c_int;
pub extern fn MPI_Win_flush_local_all(win: MPI_Win) c_int;
pub extern fn MPI_Win_free(win: [*c]MPI_Win) c_int;
pub extern fn MPI_Win_free_keyval(win_keyval: [*c]c_int) c_int;
pub extern fn MPI_Win_get_attr(win: MPI_Win, win_keyval: c_int, attribute_val: ?*anyopaque, flag: [*c]c_int) c_int;
pub extern fn MPI_Win_get_errhandler(win: MPI_Win, errhandler: [*c]MPI_Errhandler) c_int;
pub extern fn MPI_Win_get_group(win: MPI_Win, group: [*c]MPI_Group) c_int;
pub extern fn MPI_Win_get_info(win: MPI_Win, info_used: [*c]MPI_Info) c_int;
pub extern fn MPI_Win_get_name(win: MPI_Win, win_name: [*c]u8, resultlen: [*c]c_int) c_int;
pub extern fn MPI_Win_lock(lock_type: c_int, rank: c_int, mpi_assert: c_int, win: MPI_Win) c_int;
pub extern fn MPI_Win_lock_all(mpi_assert: c_int, win: MPI_Win) c_int;
pub extern fn MPI_Win_post(group: MPI_Group, mpi_assert: c_int, win: MPI_Win) c_int;
pub extern fn MPI_Win_set_attr(win: MPI_Win, win_keyval: c_int, attribute_val: ?*anyopaque) c_int;
pub extern fn MPI_Win_set_errhandler(win: MPI_Win, errhandler: MPI_Errhandler) c_int;
pub extern fn MPI_Win_set_info(win: MPI_Win, info: MPI_Info) c_int;
pub extern fn MPI_Win_set_name(win: MPI_Win, win_name: [*c]const u8) c_int;
pub extern fn MPI_Win_shared_query(win: MPI_Win, rank: c_int, size: [*c]MPI_Aint, disp_unit: [*c]c_int, baseptr: ?*anyopaque) c_int;
pub extern fn MPI_Win_start(group: MPI_Group, mpi_assert: c_int, win: MPI_Win) c_int;
pub extern fn MPI_Win_sync(win: MPI_Win) c_int;
pub extern fn MPI_Win_test(win: MPI_Win, flag: [*c]c_int) c_int;
pub extern fn MPI_Win_unlock(rank: c_int, win: MPI_Win) c_int;
pub extern fn MPI_Win_unlock_all(win: MPI_Win) c_int;
pub extern fn MPI_Win_wait(win: MPI_Win) c_int;
pub extern fn MPI_Wtick() f64;
pub extern fn MPI_Wtime() f64;
pub extern fn PMPI_Abort(comm: MPI_Comm, errorcode: c_int) c_int;
pub extern fn PMPI_Accumulate(origin_addr: ?*const anyopaque, origin_count: c_int, origin_datatype: MPI_Datatype, target_rank: c_int, target_disp: MPI_Aint, target_count: c_int, target_datatype: MPI_Datatype, op: MPI_Op, win: MPI_Win) c_int;
pub extern fn PMPI_Add_error_class(errorclass: [*c]c_int) c_int;
pub extern fn PMPI_Add_error_code(errorclass: c_int, errorcode: [*c]c_int) c_int;
pub extern fn PMPI_Add_error_string(errorcode: c_int, string: [*c]const u8) c_int;
pub extern fn PMPI_Allgather(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, comm: MPI_Comm) c_int;
pub extern fn PMPI_Iallgather(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Allgather_init(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Allgatherv(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, displs: [*c]const c_int, recvtype: MPI_Datatype, comm: MPI_Comm) c_int;
pub extern fn PMPI_Iallgatherv(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, displs: [*c]const c_int, recvtype: MPI_Datatype, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Allgatherv_init(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, displs: [*c]const c_int, recvtype: MPI_Datatype, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Alloc_mem(size: MPI_Aint, info: MPI_Info, baseptr: ?*anyopaque) c_int;
pub extern fn PMPI_Allreduce(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm) c_int;
pub extern fn PMPI_Iallreduce(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Allreduce_init(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Alltoall(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, comm: MPI_Comm) c_int;
pub extern fn PMPI_Ialltoall(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Alltoall_init(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Alltoallv(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, sdispls: [*c]const c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, rdispls: [*c]const c_int, recvtype: MPI_Datatype, comm: MPI_Comm) c_int;
pub extern fn PMPI_Ialltoallv(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, sdispls: [*c]const c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, rdispls: [*c]const c_int, recvtype: MPI_Datatype, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Alltoallv_init(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, sdispls: [*c]const c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, rdispls: [*c]const c_int, recvtype: MPI_Datatype, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Alltoallw(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, sdispls: [*c]const c_int, sendtypes: [*c]const MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, rdispls: [*c]const c_int, recvtypes: [*c]const MPI_Datatype, comm: MPI_Comm) c_int;
pub extern fn PMPI_Ialltoallw(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, sdispls: [*c]const c_int, sendtypes: [*c]const MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, rdispls: [*c]const c_int, recvtypes: [*c]const MPI_Datatype, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Alltoallw_init(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, sdispls: [*c]const c_int, sendtypes: [*c]const MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, rdispls: [*c]const c_int, recvtypes: [*c]const MPI_Datatype, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Dist_graph_create(comm_old: MPI_Comm, n: c_int, nodes: [*c]const c_int, degrees: [*c]const c_int, targets: [*c]const c_int, weights: [*c]const c_int, info: MPI_Info, reorder: c_int, newcomm: [*c]MPI_Comm) c_int;
pub extern fn PMPI_Dist_graph_create_adjacent(comm_old: MPI_Comm, indegree: c_int, sources: [*c]const c_int, sourceweights: [*c]const c_int, outdegree: c_int, destinations: [*c]const c_int, destweights: [*c]const c_int, info: MPI_Info, reorder: c_int, comm_dist_graph: [*c]MPI_Comm) c_int;
pub extern fn PMPI_Dist_graph_neighbors(comm: MPI_Comm, maxindegree: c_int, sources: [*c]c_int, sourceweights: [*c]c_int, maxoutdegree: c_int, destinations: [*c]c_int, destweights: [*c]c_int) c_int;
pub extern fn PMPI_Dist_graph_neighbors_count(comm: MPI_Comm, inneighbors: [*c]c_int, outneighbors: [*c]c_int, weighted: [*c]c_int) c_int;
pub extern fn PMPI_Barrier(comm: MPI_Comm) c_int;
pub extern fn PMPI_Ibarrier(comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Barrier_init(comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Bcast(buffer: ?*anyopaque, count: c_int, datatype: MPI_Datatype, root: c_int, comm: MPI_Comm) c_int;
pub extern fn PMPI_Ibcast(buffer: ?*anyopaque, count: c_int, datatype: MPI_Datatype, root: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Bcast_init(buffer: ?*anyopaque, count: c_int, datatype: MPI_Datatype, root: c_int, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Bsend(buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm) c_int;
pub extern fn PMPI_Bsend_init(buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Buffer_attach(buffer: ?*anyopaque, size: c_int) c_int;
pub extern fn PMPI_Buffer_detach(buffer: ?*anyopaque, size: [*c]c_int) c_int;
pub extern fn PMPI_Cancel(request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Cart_coords(comm: MPI_Comm, rank: c_int, maxdims: c_int, coords: [*c]c_int) c_int;
pub extern fn PMPI_Cart_create(old_comm: MPI_Comm, ndims: c_int, dims: [*c]const c_int, periods: [*c]const c_int, reorder: c_int, comm_cart: [*c]MPI_Comm) c_int;
pub extern fn PMPI_Cart_get(comm: MPI_Comm, maxdims: c_int, dims: [*c]c_int, periods: [*c]c_int, coords: [*c]c_int) c_int;
pub extern fn PMPI_Cart_map(comm: MPI_Comm, ndims: c_int, dims: [*c]const c_int, periods: [*c]const c_int, newrank: [*c]c_int) c_int;
pub extern fn PMPI_Cart_rank(comm: MPI_Comm, coords: [*c]const c_int, rank: [*c]c_int) c_int;
pub extern fn PMPI_Cart_shift(comm: MPI_Comm, direction: c_int, disp: c_int, rank_source: [*c]c_int, rank_dest: [*c]c_int) c_int;
pub extern fn PMPI_Cart_sub(comm: MPI_Comm, remain_dims: [*c]const c_int, new_comm: [*c]MPI_Comm) c_int;
pub extern fn PMPI_Cartdim_get(comm: MPI_Comm, ndims: [*c]c_int) c_int;
pub extern fn PMPI_Close_port(port_name: [*c]const u8) c_int;
pub extern fn PMPI_Comm_accept(port_name: [*c]const u8, info: MPI_Info, root: c_int, comm: MPI_Comm, newcomm: [*c]MPI_Comm) c_int;
pub extern fn PMPI_Comm_c2f(comm: MPI_Comm) c_int;
pub extern fn PMPI_Comm_call_errhandler(comm: MPI_Comm, errorcode: c_int) c_int;
pub extern fn PMPI_Comm_compare(comm1: MPI_Comm, comm2: MPI_Comm, result: [*c]c_int) c_int;
pub extern fn PMPI_Comm_connect(port_name: [*c]const u8, info: MPI_Info, root: c_int, comm: MPI_Comm, newcomm: [*c]MPI_Comm) c_int;
pub extern fn PMPI_Comm_create_errhandler(function: ?*const MPI_Comm_errhandler_function, errhandler: [*c]MPI_Errhandler) c_int;
pub extern fn PMPI_Comm_create_keyval(comm_copy_attr_fn: ?*const MPI_Comm_copy_attr_function, comm_delete_attr_fn: ?*const MPI_Comm_delete_attr_function, comm_keyval: [*c]c_int, extra_state: ?*anyopaque) c_int;
pub extern fn PMPI_Comm_create_group(comm: MPI_Comm, group: MPI_Group, tag: c_int, newcomm: [*c]MPI_Comm) c_int;
pub extern fn PMPI_Comm_create_from_group(group: MPI_Group, tag: [*c]const u8, info: MPI_Info, errhandler: MPI_Errhandler, newcomm: [*c]MPI_Comm) c_int;
pub extern fn PMPI_Comm_create(comm: MPI_Comm, group: MPI_Group, newcomm: [*c]MPI_Comm) c_int;
pub extern fn PMPI_Comm_delete_attr(comm: MPI_Comm, comm_keyval: c_int) c_int;
pub extern fn PMPI_Comm_disconnect(comm: [*c]MPI_Comm) c_int;
pub extern fn PMPI_Comm_dup(comm: MPI_Comm, newcomm: [*c]MPI_Comm) c_int;
pub extern fn PMPI_Comm_idup(comm: MPI_Comm, newcomm: [*c]MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Comm_dup_with_info(comm: MPI_Comm, info: MPI_Info, newcomm: [*c]MPI_Comm) c_int;
pub extern fn PMPI_Comm_idup_with_info(comm: MPI_Comm, info: MPI_Info, newcomm: [*c]MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Comm_f2c(comm: c_int) MPI_Comm;
pub extern fn PMPI_Comm_free_keyval(comm_keyval: [*c]c_int) c_int;
pub extern fn PMPI_Comm_free(comm: [*c]MPI_Comm) c_int;
pub extern fn PMPI_Comm_get_attr(comm: MPI_Comm, comm_keyval: c_int, attribute_val: ?*anyopaque, flag: [*c]c_int) c_int;
pub extern fn PMPI_Comm_get_errhandler(comm: MPI_Comm, erhandler: [*c]MPI_Errhandler) c_int;
pub extern fn PMPI_Comm_get_info(comm: MPI_Comm, info_used: [*c]MPI_Info) c_int;
pub extern fn PMPI_Comm_get_name(comm: MPI_Comm, comm_name: [*c]u8, resultlen: [*c]c_int) c_int;
pub extern fn PMPI_Comm_get_parent(parent: [*c]MPI_Comm) c_int;
pub extern fn PMPI_Comm_group(comm: MPI_Comm, group: [*c]MPI_Group) c_int;
pub extern fn PMPI_Comm_join(fd: c_int, intercomm: [*c]MPI_Comm) c_int;
pub extern fn PMPI_Comm_rank(comm: MPI_Comm, rank: [*c]c_int) c_int;
pub extern fn PMPI_Comm_remote_group(comm: MPI_Comm, group: [*c]MPI_Group) c_int;
pub extern fn PMPI_Comm_remote_size(comm: MPI_Comm, size: [*c]c_int) c_int;
pub extern fn PMPI_Comm_set_attr(comm: MPI_Comm, comm_keyval: c_int, attribute_val: ?*anyopaque) c_int;
pub extern fn PMPI_Comm_set_errhandler(comm: MPI_Comm, errhandler: MPI_Errhandler) c_int;
pub extern fn PMPI_Comm_set_info(comm: MPI_Comm, info: MPI_Info) c_int;
pub extern fn PMPI_Comm_set_name(comm: MPI_Comm, comm_name: [*c]const u8) c_int;
pub extern fn PMPI_Comm_size(comm: MPI_Comm, size: [*c]c_int) c_int;
pub extern fn PMPI_Comm_spawn(command: [*c]const u8, argv: [*c][*c]u8, maxprocs: c_int, info: MPI_Info, root: c_int, comm: MPI_Comm, intercomm: [*c]MPI_Comm, array_of_errcodes: [*c]c_int) c_int;
pub extern fn PMPI_Comm_spawn_multiple(count: c_int, array_of_commands: [*c][*c]u8, array_of_argv: [*c][*c][*c]u8, array_of_maxprocs: [*c]const c_int, array_of_info: [*c]const MPI_Info, root: c_int, comm: MPI_Comm, intercomm: [*c]MPI_Comm, array_of_errcodes: [*c]c_int) c_int;
pub extern fn PMPI_Comm_split(comm: MPI_Comm, color: c_int, key: c_int, newcomm: [*c]MPI_Comm) c_int;
pub extern fn PMPI_Comm_split_type(comm: MPI_Comm, split_type: c_int, key: c_int, info: MPI_Info, newcomm: [*c]MPI_Comm) c_int;
pub extern fn PMPI_Comm_test_inter(comm: MPI_Comm, flag: [*c]c_int) c_int;
pub extern fn PMPI_Compare_and_swap(origin_addr: ?*const anyopaque, compare_addr: ?*const anyopaque, result_addr: ?*anyopaque, datatype: MPI_Datatype, target_rank: c_int, target_disp: MPI_Aint, win: MPI_Win) c_int;
pub extern fn PMPI_Dims_create(nnodes: c_int, ndims: c_int, dims: [*c]c_int) c_int;
pub extern fn PMPI_Errhandler_c2f(errhandler: MPI_Errhandler) c_int;
pub extern fn PMPI_Errhandler_f2c(errhandler: c_int) MPI_Errhandler;
pub extern fn PMPI_Errhandler_free(errhandler: [*c]MPI_Errhandler) c_int;
pub extern fn PMPI_Error_class(errorcode: c_int, errorclass: [*c]c_int) c_int;
pub extern fn PMPI_Error_string(errorcode: c_int, string: [*c]u8, resultlen: [*c]c_int) c_int;
pub extern fn PMPI_Exscan(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm) c_int;
pub extern fn PMPI_Iexscan(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Exscan_init(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Fetch_and_op(origin_addr: ?*const anyopaque, result_addr: ?*anyopaque, datatype: MPI_Datatype, target_rank: c_int, target_disp: MPI_Aint, op: MPI_Op, win: MPI_Win) c_int;
pub extern fn PMPI_File_c2f(file: MPI_File) c_int;
pub extern fn PMPI_File_f2c(file: c_int) MPI_File;
pub extern fn PMPI_File_call_errhandler(fh: MPI_File, errorcode: c_int) c_int;
pub extern fn PMPI_File_create_errhandler(function: ?*const MPI_File_errhandler_function, errhandler: [*c]MPI_Errhandler) c_int;
pub extern fn PMPI_File_set_errhandler(file: MPI_File, errhandler: MPI_Errhandler) c_int;
pub extern fn PMPI_File_get_errhandler(file: MPI_File, errhandler: [*c]MPI_Errhandler) c_int;
pub extern fn PMPI_File_open(comm: MPI_Comm, filename: [*c]const u8, amode: c_int, info: MPI_Info, fh: [*c]MPI_File) c_int;
pub extern fn PMPI_File_close(fh: [*c]MPI_File) c_int;
pub extern fn PMPI_File_delete(filename: [*c]const u8, info: MPI_Info) c_int;
pub extern fn PMPI_File_set_size(fh: MPI_File, size: MPI_Offset) c_int;
pub extern fn PMPI_File_preallocate(fh: MPI_File, size: MPI_Offset) c_int;
pub extern fn PMPI_File_get_size(fh: MPI_File, size: [*c]MPI_Offset) c_int;
pub extern fn PMPI_File_get_group(fh: MPI_File, group: [*c]MPI_Group) c_int;
pub extern fn PMPI_File_get_amode(fh: MPI_File, amode: [*c]c_int) c_int;
pub extern fn PMPI_File_set_info(fh: MPI_File, info: MPI_Info) c_int;
pub extern fn PMPI_File_get_info(fh: MPI_File, info_used: [*c]MPI_Info) c_int;
pub extern fn PMPI_File_set_view(fh: MPI_File, disp: MPI_Offset, etype: MPI_Datatype, filetype: MPI_Datatype, datarep: [*c]const u8, info: MPI_Info) c_int;
pub extern fn PMPI_File_get_view(fh: MPI_File, disp: [*c]MPI_Offset, etype: [*c]MPI_Datatype, filetype: [*c]MPI_Datatype, datarep: [*c]u8) c_int;
pub extern fn PMPI_File_read_at(fh: MPI_File, offset: MPI_Offset, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_File_read_at_all(fh: MPI_File, offset: MPI_Offset, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_File_write_at(fh: MPI_File, offset: MPI_Offset, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_File_write_at_all(fh: MPI_File, offset: MPI_Offset, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_File_iread_at(fh: MPI_File, offset: MPI_Offset, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_File_iwrite_at(fh: MPI_File, offset: MPI_Offset, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_File_iread_at_all(fh: MPI_File, offset: MPI_Offset, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_File_iwrite_at_all(fh: MPI_File, offset: MPI_Offset, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_File_read(fh: MPI_File, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_File_read_all(fh: MPI_File, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_File_write(fh: MPI_File, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_File_write_all(fh: MPI_File, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_File_iread(fh: MPI_File, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_File_iwrite(fh: MPI_File, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_File_iread_all(fh: MPI_File, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_File_iwrite_all(fh: MPI_File, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_File_seek(fh: MPI_File, offset: MPI_Offset, whence: c_int) c_int;
pub extern fn PMPI_File_get_position(fh: MPI_File, offset: [*c]MPI_Offset) c_int;
pub extern fn PMPI_File_get_byte_offset(fh: MPI_File, offset: MPI_Offset, disp: [*c]MPI_Offset) c_int;
pub extern fn PMPI_File_read_shared(fh: MPI_File, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_File_write_shared(fh: MPI_File, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_File_iread_shared(fh: MPI_File, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_File_iwrite_shared(fh: MPI_File, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_File_read_ordered(fh: MPI_File, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_File_write_ordered(fh: MPI_File, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_File_seek_shared(fh: MPI_File, offset: MPI_Offset, whence: c_int) c_int;
pub extern fn PMPI_File_get_position_shared(fh: MPI_File, offset: [*c]MPI_Offset) c_int;
pub extern fn PMPI_File_read_at_all_begin(fh: MPI_File, offset: MPI_Offset, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype) c_int;
pub extern fn PMPI_File_read_at_all_end(fh: MPI_File, buf: ?*anyopaque, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_File_write_at_all_begin(fh: MPI_File, offset: MPI_Offset, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype) c_int;
pub extern fn PMPI_File_write_at_all_end(fh: MPI_File, buf: ?*const anyopaque, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_File_read_all_begin(fh: MPI_File, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype) c_int;
pub extern fn PMPI_File_read_all_end(fh: MPI_File, buf: ?*anyopaque, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_File_write_all_begin(fh: MPI_File, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype) c_int;
pub extern fn PMPI_File_write_all_end(fh: MPI_File, buf: ?*const anyopaque, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_File_read_ordered_begin(fh: MPI_File, buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype) c_int;
pub extern fn PMPI_File_read_ordered_end(fh: MPI_File, buf: ?*anyopaque, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_File_write_ordered_begin(fh: MPI_File, buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype) c_int;
pub extern fn PMPI_File_write_ordered_end(fh: MPI_File, buf: ?*const anyopaque, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_File_get_type_extent(fh: MPI_File, datatype: MPI_Datatype, extent: [*c]MPI_Aint) c_int;
pub extern fn PMPI_File_set_atomicity(fh: MPI_File, flag: c_int) c_int;
pub extern fn PMPI_File_get_atomicity(fh: MPI_File, flag: [*c]c_int) c_int;
pub extern fn PMPI_File_sync(fh: MPI_File) c_int;
pub extern fn PMPI_Finalize() c_int;
pub extern fn PMPI_Finalized(flag: [*c]c_int) c_int;
pub extern fn PMPI_Free_mem(base: ?*anyopaque) c_int;
pub extern fn PMPI_Gather(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, root: c_int, comm: MPI_Comm) c_int;
pub extern fn PMPI_Igather(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, root: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Gather_init(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, root: c_int, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Gatherv(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, displs: [*c]const c_int, recvtype: MPI_Datatype, root: c_int, comm: MPI_Comm) c_int;
pub extern fn PMPI_Igatherv(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, displs: [*c]const c_int, recvtype: MPI_Datatype, root: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Gatherv_init(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, displs: [*c]const c_int, recvtype: MPI_Datatype, root: c_int, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Get_address(location: ?*const anyopaque, address: [*c]MPI_Aint) c_int;
pub extern fn PMPI_Get_count(status: [*c]const MPI_Status, datatype: MPI_Datatype, count: [*c]c_int) c_int;
pub extern fn PMPI_Get_elements(status: [*c]const MPI_Status, datatype: MPI_Datatype, count: [*c]c_int) c_int;
pub extern fn PMPI_Get_elements_x(status: [*c]const MPI_Status, datatype: MPI_Datatype, count: [*c]MPI_Count) c_int;
pub extern fn PMPI_Get(origin_addr: ?*anyopaque, origin_count: c_int, origin_datatype: MPI_Datatype, target_rank: c_int, target_disp: MPI_Aint, target_count: c_int, target_datatype: MPI_Datatype, win: MPI_Win) c_int;
pub extern fn PMPI_Get_accumulate(origin_addr: ?*const anyopaque, origin_count: c_int, origin_datatype: MPI_Datatype, result_addr: ?*anyopaque, result_count: c_int, result_datatype: MPI_Datatype, target_rank: c_int, target_disp: MPI_Aint, target_count: c_int, target_datatype: MPI_Datatype, op: MPI_Op, win: MPI_Win) c_int;
pub extern fn PMPI_Get_library_version(version: [*c]u8, resultlen: [*c]c_int) c_int;
pub extern fn PMPI_Get_processor_name(name: [*c]u8, resultlen: [*c]c_int) c_int;
pub extern fn PMPI_Get_version(version: [*c]c_int, subversion: [*c]c_int) c_int;
pub extern fn PMPI_Graph_create(comm_old: MPI_Comm, nnodes: c_int, index: [*c]const c_int, edges: [*c]const c_int, reorder: c_int, comm_graph: [*c]MPI_Comm) c_int;
pub extern fn PMPI_Graph_get(comm: MPI_Comm, maxindex: c_int, maxedges: c_int, index: [*c]c_int, edges: [*c]c_int) c_int;
pub extern fn PMPI_Graph_map(comm: MPI_Comm, nnodes: c_int, index: [*c]const c_int, edges: [*c]const c_int, newrank: [*c]c_int) c_int;
pub extern fn PMPI_Graph_neighbors_count(comm: MPI_Comm, rank: c_int, nneighbors: [*c]c_int) c_int;
pub extern fn PMPI_Graph_neighbors(comm: MPI_Comm, rank: c_int, maxneighbors: c_int, neighbors: [*c]c_int) c_int;
pub extern fn PMPI_Graphdims_get(comm: MPI_Comm, nnodes: [*c]c_int, nedges: [*c]c_int) c_int;
pub extern fn PMPI_Grequest_complete(request: MPI_Request) c_int;
pub extern fn PMPI_Grequest_start(query_fn: ?*const MPI_Grequest_query_function, free_fn: ?*const MPI_Grequest_free_function, cancel_fn: ?*const MPI_Grequest_cancel_function, extra_state: ?*anyopaque, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Group_c2f(group: MPI_Group) c_int;
pub extern fn PMPI_Group_compare(group1: MPI_Group, group2: MPI_Group, result: [*c]c_int) c_int;
pub extern fn PMPI_Group_difference(group1: MPI_Group, group2: MPI_Group, newgroup: [*c]MPI_Group) c_int;
pub extern fn PMPI_Group_excl(group: MPI_Group, n: c_int, ranks: [*c]const c_int, newgroup: [*c]MPI_Group) c_int;
pub extern fn PMPI_Group_f2c(group: c_int) MPI_Group;
pub extern fn PMPI_Group_free(group: [*c]MPI_Group) c_int;
pub extern fn PMPI_Group_from_session_pset(session: MPI_Session, pset_name: [*c]const u8, newgroup: [*c]MPI_Group) c_int;
pub extern fn PMPI_Group_incl(group: MPI_Group, n: c_int, ranks: [*c]const c_int, newgroup: [*c]MPI_Group) c_int;
pub extern fn PMPI_Group_intersection(group1: MPI_Group, group2: MPI_Group, newgroup: [*c]MPI_Group) c_int;
pub extern fn PMPI_Group_range_excl(group: MPI_Group, n: c_int, ranges: [*c][3]c_int, newgroup: [*c]MPI_Group) c_int;
pub extern fn PMPI_Group_range_incl(group: MPI_Group, n: c_int, ranges: [*c][3]c_int, newgroup: [*c]MPI_Group) c_int;
pub extern fn PMPI_Group_rank(group: MPI_Group, rank: [*c]c_int) c_int;
pub extern fn PMPI_Group_size(group: MPI_Group, size: [*c]c_int) c_int;
pub extern fn PMPI_Group_translate_ranks(group1: MPI_Group, n: c_int, ranks1: [*c]const c_int, group2: MPI_Group, ranks2: [*c]c_int) c_int;
pub extern fn PMPI_Group_union(group1: MPI_Group, group2: MPI_Group, newgroup: [*c]MPI_Group) c_int;
pub extern fn PMPI_Ibsend(buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Improbe(source: c_int, tag: c_int, comm: MPI_Comm, flag: [*c]c_int, message: [*c]MPI_Message, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_Imrecv(buf: ?*anyopaque, count: c_int, @"type": MPI_Datatype, message: [*c]MPI_Message, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Info_c2f(info: MPI_Info) c_int;
pub extern fn PMPI_Info_create(info: [*c]MPI_Info) c_int;
pub extern fn PMPI_Info_create_env(argc: c_int, argv: [*c][*c]u8, info: [*c]MPI_Info) c_int;
pub extern fn PMPI_Info_delete(info: MPI_Info, key: [*c]const u8) c_int;
pub extern fn PMPI_Info_dup(info: MPI_Info, newinfo: [*c]MPI_Info) c_int;
pub extern fn PMPI_Info_f2c(info: c_int) MPI_Info;
pub extern fn PMPI_Info_free(info: [*c]MPI_Info) c_int;
pub extern fn PMPI_Info_get(info: MPI_Info, key: [*c]const u8, valuelen: c_int, value: [*c]u8, flag: [*c]c_int) c_int;
pub extern fn PMPI_Info_get_nkeys(info: MPI_Info, nkeys: [*c]c_int) c_int;
pub extern fn PMPI_Info_get_nthkey(info: MPI_Info, n: c_int, key: [*c]u8) c_int;
pub extern fn PMPI_Info_get_string(info: MPI_Info, key: [*c]const u8, buflen: [*c]c_int, value: [*c]u8, flag: [*c]c_int) c_int;
pub extern fn PMPI_Info_get_valuelen(info: MPI_Info, key: [*c]const u8, valuelen: [*c]c_int, flag: [*c]c_int) c_int;
pub extern fn PMPI_Info_set(info: MPI_Info, key: [*c]const u8, value: [*c]const u8) c_int;
pub extern fn PMPI_Init(argc: [*c]c_int, argv: [*c][*c][*c]u8) c_int;
pub extern fn PMPI_Initialized(flag: [*c]c_int) c_int;
pub extern fn PMPI_Init_thread(argc: [*c]c_int, argv: [*c][*c][*c]u8, required: c_int, provided: [*c]c_int) c_int;
pub extern fn PMPI_Intercomm_create(local_comm: MPI_Comm, local_leader: c_int, bridge_comm: MPI_Comm, remote_leader: c_int, tag: c_int, newintercomm: [*c]MPI_Comm) c_int;
pub extern fn PMPI_Intercomm_create_from_groups(local_group: MPI_Group, local_leader: c_int, remote_group: MPI_Group, remote_leader: c_int, tag: [*c]const u8, info: MPI_Info, errhandler: MPI_Errhandler, newintercomm: [*c]MPI_Comm) c_int;
pub extern fn PMPI_Intercomm_merge(intercomm: MPI_Comm, high: c_int, newintercomm: [*c]MPI_Comm) c_int;
pub extern fn PMPI_Iprobe(source: c_int, tag: c_int, comm: MPI_Comm, flag: [*c]c_int, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_Irecv(buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, source: c_int, tag: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Irsend(buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Isend(buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Isendrecv(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, dest: c_int, sendtag: c_int, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, source: c_int, recvtag: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Isendrecv_replace(buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, sendtag: c_int, source: c_int, recvtag: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Issend(buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Precv_init(buf: ?*anyopaque, partitions: c_int, count: MPI_Count, datatype: MPI_Datatype, source: c_int, tag: c_int, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Psend_init(buf: ?*const anyopaque, partitions: c_int, count: MPI_Count, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Pready(partitions: c_int, request: MPI_Request) c_int;
pub extern fn PMPI_Pready_range(partition_low: c_int, partition_high: c_int, request: MPI_Request) c_int;
pub extern fn PMPI_Pready_list(length: c_int, partition_list: [*c]c_int, request: MPI_Request) c_int;
pub extern fn PMPI_Parrived(request: MPI_Request, partition: c_int, flag: [*c]c_int) c_int;
pub extern fn PMPI_Is_thread_main(flag: [*c]c_int) c_int;
pub extern fn PMPI_Lookup_name(service_name: [*c]const u8, info: MPI_Info, port_name: [*c]u8) c_int;
pub extern fn PMPI_Message_c2f(message: MPI_Message) c_int;
pub extern fn PMPI_Message_f2c(message: c_int) MPI_Message;
pub extern fn PMPI_Mprobe(source: c_int, tag: c_int, comm: MPI_Comm, message: [*c]MPI_Message, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_Mrecv(buf: ?*anyopaque, count: c_int, @"type": MPI_Datatype, message: [*c]MPI_Message, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_Neighbor_allgather(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, comm: MPI_Comm) c_int;
pub extern fn PMPI_Ineighbor_allgather(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Neighbor_allgather_init(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Neighbor_allgatherv(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, displs: [*c]const c_int, recvtype: MPI_Datatype, comm: MPI_Comm) c_int;
pub extern fn PMPI_Ineighbor_allgatherv(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, displs: [*c]const c_int, recvtype: MPI_Datatype, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Neighbor_allgatherv_init(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, displs: [*c]const c_int, recvtype: MPI_Datatype, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Neighbor_alltoall(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, comm: MPI_Comm) c_int;
pub extern fn PMPI_Ineighbor_alltoall(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Neighbor_alltoall_init(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Neighbor_alltoallv(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, sdispls: [*c]const c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, rdispls: [*c]const c_int, recvtype: MPI_Datatype, comm: MPI_Comm) c_int;
pub extern fn PMPI_Ineighbor_alltoallv(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, sdispls: [*c]const c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, rdispls: [*c]const c_int, recvtype: MPI_Datatype, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Neighbor_alltoallv_init(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, sdispls: [*c]const c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, rdispls: [*c]const c_int, recvtype: MPI_Datatype, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Neighbor_alltoallw(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, sdispls: [*c]const MPI_Aint, sendtypes: [*c]const MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, rdispls: [*c]const MPI_Aint, recvtypes: [*c]const MPI_Datatype, comm: MPI_Comm) c_int;
pub extern fn PMPI_Ineighbor_alltoallw(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, sdispls: [*c]const MPI_Aint, sendtypes: [*c]const MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, rdispls: [*c]const MPI_Aint, recvtypes: [*c]const MPI_Datatype, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Neighbor_alltoallw_init(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, sdispls: [*c]const MPI_Aint, sendtypes: [*c]const MPI_Datatype, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, rdispls: [*c]const MPI_Aint, recvtypes: [*c]const MPI_Datatype, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Op_c2f(op: MPI_Op) c_int;
pub extern fn PMPI_Op_commutative(op: MPI_Op, commute: [*c]c_int) c_int;
pub extern fn PMPI_Op_create(function: ?*const MPI_User_function, commute: c_int, op: [*c]MPI_Op) c_int;
pub extern fn PMPI_Open_port(info: MPI_Info, port_name: [*c]u8) c_int;
pub extern fn PMPI_Op_f2c(op: c_int) MPI_Op;
pub extern fn PMPI_Op_free(op: [*c]MPI_Op) c_int;
pub extern fn PMPI_Pack_external(datarep: [*c]const u8, inbuf: ?*const anyopaque, incount: c_int, datatype: MPI_Datatype, outbuf: ?*anyopaque, outsize: MPI_Aint, position: [*c]MPI_Aint) c_int;
pub extern fn PMPI_Pack_external_size(datarep: [*c]const u8, incount: c_int, datatype: MPI_Datatype, size: [*c]MPI_Aint) c_int;
pub extern fn PMPI_Pack(inbuf: ?*const anyopaque, incount: c_int, datatype: MPI_Datatype, outbuf: ?*anyopaque, outsize: c_int, position: [*c]c_int, comm: MPI_Comm) c_int;
pub extern fn PMPI_Pack_size(incount: c_int, datatype: MPI_Datatype, comm: MPI_Comm, size: [*c]c_int) c_int;
pub extern fn PMPI_Pcontrol(level: c_int, ...) c_int;
pub extern fn PMPI_Probe(source: c_int, tag: c_int, comm: MPI_Comm, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_Publish_name(service_name: [*c]const u8, info: MPI_Info, port_name: [*c]const u8) c_int;
pub extern fn PMPI_Put(origin_addr: ?*const anyopaque, origin_count: c_int, origin_datatype: MPI_Datatype, target_rank: c_int, target_disp: MPI_Aint, target_count: c_int, target_datatype: MPI_Datatype, win: MPI_Win) c_int;
pub extern fn PMPI_Query_thread(provided: [*c]c_int) c_int;
pub extern fn PMPI_Raccumulate(origin_addr: ?*const anyopaque, origin_count: c_int, origin_datatype: MPI_Datatype, target_rank: c_int, target_disp: MPI_Aint, target_count: c_int, target_datatype: MPI_Datatype, op: MPI_Op, win: MPI_Win, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Recv_init(buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, source: c_int, tag: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Recv(buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, source: c_int, tag: c_int, comm: MPI_Comm, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_Reduce(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op, root: c_int, comm: MPI_Comm) c_int;
pub extern fn PMPI_Ireduce(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op, root: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Reduce_init(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op, root: c_int, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Reduce_local(inbuf: ?*const anyopaque, inoutbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op) c_int;
pub extern fn PMPI_Reduce_scatter(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm) c_int;
pub extern fn PMPI_Ireduce_scatter(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Reduce_scatter_init(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, recvcounts: [*c]const c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Reduce_scatter_block(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, recvcount: c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm) c_int;
pub extern fn PMPI_Ireduce_scatter_block(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, recvcount: c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Reduce_scatter_block_init(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, recvcount: c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Register_datarep(datarep: [*c]const u8, read_conversion_fn: ?*const MPI_Datarep_conversion_function, write_conversion_fn: ?*const MPI_Datarep_conversion_function, dtype_file_extent_fn: ?*const MPI_Datarep_extent_function, extra_state: ?*anyopaque) c_int;
pub extern fn PMPI_Request_c2f(request: MPI_Request) c_int;
pub extern fn PMPI_Request_f2c(request: c_int) MPI_Request;
pub extern fn PMPI_Request_free(request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Request_get_status(request: MPI_Request, flag: [*c]c_int, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_Rget(origin_addr: ?*anyopaque, origin_count: c_int, origin_datatype: MPI_Datatype, target_rank: c_int, target_disp: MPI_Aint, target_count: c_int, target_datatype: MPI_Datatype, win: MPI_Win, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Rget_accumulate(origin_addr: ?*const anyopaque, origin_count: c_int, origin_datatype: MPI_Datatype, result_addr: ?*anyopaque, result_count: c_int, result_datatype: MPI_Datatype, target_rank: c_int, target_disp: MPI_Aint, target_count: c_int, target_datatype: MPI_Datatype, op: MPI_Op, win: MPI_Win, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Rput(origin_addr: ?*const anyopaque, origin_count: c_int, origin_datatype: MPI_Datatype, target_rank: c_int, target_disp: MPI_Aint, target_cout: c_int, target_datatype: MPI_Datatype, win: MPI_Win, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Rsend(ibuf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm) c_int;
pub extern fn PMPI_Rsend_init(buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Scan(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm) c_int;
pub extern fn PMPI_Iscan(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Scan_init(sendbuf: ?*const anyopaque, recvbuf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, op: MPI_Op, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Scatter(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, root: c_int, comm: MPI_Comm) c_int;
pub extern fn PMPI_Iscatter(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, root: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Scatter_init(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, root: c_int, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Scatterv(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, displs: [*c]const c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, root: c_int, comm: MPI_Comm) c_int;
pub extern fn PMPI_Iscatterv(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, displs: [*c]const c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, root: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Scatterv_init(sendbuf: ?*const anyopaque, sendcounts: [*c]const c_int, displs: [*c]const c_int, sendtype: MPI_Datatype, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, root: c_int, comm: MPI_Comm, info: MPI_Info, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Send_init(buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Send(buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm) c_int;
pub extern fn PMPI_Sendrecv(sendbuf: ?*const anyopaque, sendcount: c_int, sendtype: MPI_Datatype, dest: c_int, sendtag: c_int, recvbuf: ?*anyopaque, recvcount: c_int, recvtype: MPI_Datatype, source: c_int, recvtag: c_int, comm: MPI_Comm, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_Sendrecv_replace(buf: ?*anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, sendtag: c_int, source: c_int, recvtag: c_int, comm: MPI_Comm, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_Session_c2f(session: MPI_Session) c_int;
pub extern fn PMPI_Session_call_errhandler(session: MPI_Session, errorcode: c_int) c_int;
pub extern fn PMPI_Session_create_errhandler(session_errhandler_fn: ?*const MPI_Session_errhandler_function, errhandler: [*c]MPI_Errhandler) c_int;
pub extern fn PMPI_Session_finalize(session: [*c]MPI_Session) c_int;
pub extern fn PMPI_Session_get_errhandler(session: MPI_Session, erhandler: [*c]MPI_Errhandler) c_int;
pub extern fn PMPI_Session_get_info(session: MPI_Session, info_used: [*c]MPI_Info) c_int;
pub extern fn PMPI_Session_get_num_psets(session: MPI_Session, info: MPI_Info, npset_names: [*c]c_int) c_int;
pub extern fn PMPI_Session_get_nth_pset(session: MPI_Session, info: MPI_Info, n: c_int, len: [*c]c_int, pset_name: [*c]u8) c_int;
pub extern fn PMPI_Session_get_pset_info(session: MPI_Session, pset_name: [*c]const u8, info_used: [*c]MPI_Info) c_int;
pub extern fn PMPI_Session_init(info: MPI_Info, errhandler: MPI_Errhandler, session: [*c]MPI_Session) c_int;
pub extern fn PMPI_Session_f2c(session: c_int) MPI_Session;
pub extern fn PMPI_Session_set_errhandler(session: MPI_Session, erhandler: MPI_Errhandler) c_int;
pub extern fn PMPI_Session_set_info(session: MPI_Session, info: MPI_Info) c_int;
pub extern fn PMPI_Ssend_init(buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm, request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Ssend(buf: ?*const anyopaque, count: c_int, datatype: MPI_Datatype, dest: c_int, tag: c_int, comm: MPI_Comm) c_int;
pub extern fn PMPI_Start(request: [*c]MPI_Request) c_int;
pub extern fn PMPI_Startall(count: c_int, array_of_requests: [*c]MPI_Request) c_int;
pub extern fn PMPI_Status_c2f(c_status: [*c]const MPI_Status, f_status: [*c]c_int) c_int;
pub extern fn PMPI_Status_c2f08(c_status: [*c]const MPI_Status, f08_status: [*c]MPI_F08_status) c_int;
pub extern fn PMPI_Status_f082f(f08_status: [*c]const MPI_F08_status, f_status: [*c]c_int) c_int;
pub extern fn PMPI_Status_f082c(f08_status: [*c]const MPI_F08_status, c_status: [*c]MPI_Status) c_int;
pub extern fn PMPI_Status_f2c(f_status: [*c]const c_int, c_status: [*c]MPI_Status) c_int;
pub extern fn PMPI_Status_f2f08(f_status: [*c]const c_int, f08_status: [*c]MPI_F08_status) c_int;
pub extern fn PMPI_Status_set_cancelled(status: [*c]MPI_Status, flag: c_int) c_int;
pub extern fn PMPI_Status_set_elements(status: [*c]MPI_Status, datatype: MPI_Datatype, count: c_int) c_int;
pub extern fn PMPI_Status_set_elements_x(status: [*c]MPI_Status, datatype: MPI_Datatype, count: MPI_Count) c_int;
pub extern fn PMPI_Testall(count: c_int, array_of_requests: [*c]MPI_Request, flag: [*c]c_int, array_of_statuses: [*c]MPI_Status) c_int;
pub extern fn PMPI_Testany(count: c_int, array_of_requests: [*c]MPI_Request, index: [*c]c_int, flag: [*c]c_int, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_Test(request: [*c]MPI_Request, flag: [*c]c_int, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_Test_cancelled(status: [*c]const MPI_Status, flag: [*c]c_int) c_int;
pub extern fn PMPI_Testsome(incount: c_int, array_of_requests: [*c]MPI_Request, outcount: [*c]c_int, array_of_indices: [*c]c_int, array_of_statuses: [*c]MPI_Status) c_int;
pub extern fn PMPI_Topo_test(comm: MPI_Comm, status: [*c]c_int) c_int;
pub extern fn PMPI_Type_c2f(datatype: MPI_Datatype) c_int;
pub extern fn PMPI_Type_commit(@"type": [*c]MPI_Datatype) c_int;
pub extern fn PMPI_Type_contiguous(count: c_int, oldtype: MPI_Datatype, newtype: [*c]MPI_Datatype) c_int;
pub extern fn PMPI_Type_create_darray(size: c_int, rank: c_int, ndims: c_int, gsize_array: [*c]const c_int, distrib_array: [*c]const c_int, darg_array: [*c]const c_int, psize_array: [*c]const c_int, order: c_int, oldtype: MPI_Datatype, newtype: [*c]MPI_Datatype) c_int;
pub extern fn PMPI_Type_create_f90_complex(p: c_int, r: c_int, newtype: [*c]MPI_Datatype) c_int;
pub extern fn PMPI_Type_create_f90_integer(r: c_int, newtype: [*c]MPI_Datatype) c_int;
pub extern fn PMPI_Type_create_f90_real(p: c_int, r: c_int, newtype: [*c]MPI_Datatype) c_int;
pub extern fn PMPI_Type_create_hindexed(count: c_int, array_of_blocklengths: [*c]const c_int, array_of_displacements: [*c]const MPI_Aint, oldtype: MPI_Datatype, newtype: [*c]MPI_Datatype) c_int;
pub extern fn PMPI_Type_create_hvector(count: c_int, blocklength: c_int, stride: MPI_Aint, oldtype: MPI_Datatype, newtype: [*c]MPI_Datatype) c_int;
pub extern fn PMPI_Type_create_keyval(type_copy_attr_fn: ?*const MPI_Type_copy_attr_function, type_delete_attr_fn: ?*const MPI_Type_delete_attr_function, type_keyval: [*c]c_int, extra_state: ?*anyopaque) c_int;
pub extern fn PMPI_Type_create_hindexed_block(count: c_int, blocklength: c_int, array_of_displacements: [*c]const MPI_Aint, oldtype: MPI_Datatype, newtype: [*c]MPI_Datatype) c_int;
pub extern fn PMPI_Type_create_indexed_block(count: c_int, blocklength: c_int, array_of_displacements: [*c]const c_int, oldtype: MPI_Datatype, newtype: [*c]MPI_Datatype) c_int;
pub extern fn PMPI_Type_create_struct(count: c_int, array_of_block_lengths: [*c]const c_int, array_of_displacements: [*c]const MPI_Aint, array_of_types: [*c]const MPI_Datatype, newtype: [*c]MPI_Datatype) c_int;
pub extern fn PMPI_Type_create_subarray(ndims: c_int, size_array: [*c]const c_int, subsize_array: [*c]const c_int, start_array: [*c]const c_int, order: c_int, oldtype: MPI_Datatype, newtype: [*c]MPI_Datatype) c_int;
pub extern fn PMPI_Type_create_resized(oldtype: MPI_Datatype, lb: MPI_Aint, extent: MPI_Aint, newtype: [*c]MPI_Datatype) c_int;
pub extern fn PMPI_Type_delete_attr(@"type": MPI_Datatype, type_keyval: c_int) c_int;
pub extern fn PMPI_Type_dup(@"type": MPI_Datatype, newtype: [*c]MPI_Datatype) c_int;
pub extern fn PMPI_Type_free(@"type": [*c]MPI_Datatype) c_int;
pub extern fn PMPI_Type_free_keyval(type_keyval: [*c]c_int) c_int;
pub extern fn PMPI_Type_f2c(datatype: c_int) MPI_Datatype;
pub extern fn PMPI_Type_get_attr(@"type": MPI_Datatype, type_keyval: c_int, attribute_val: ?*anyopaque, flag: [*c]c_int) c_int;
pub extern fn PMPI_Type_get_contents(mtype: MPI_Datatype, max_integers: c_int, max_addresses: c_int, max_datatypes: c_int, array_of_integers: [*c]c_int, array_of_addresses: [*c]MPI_Aint, array_of_datatypes: [*c]MPI_Datatype) c_int;
pub extern fn PMPI_Type_get_envelope(@"type": MPI_Datatype, num_integers: [*c]c_int, num_addresses: [*c]c_int, num_datatypes: [*c]c_int, combiner: [*c]c_int) c_int;
pub extern fn PMPI_Type_get_extent(@"type": MPI_Datatype, lb: [*c]MPI_Aint, extent: [*c]MPI_Aint) c_int;
pub extern fn PMPI_Type_get_extent_x(@"type": MPI_Datatype, lb: [*c]MPI_Count, extent: [*c]MPI_Count) c_int;
pub extern fn PMPI_Type_get_name(@"type": MPI_Datatype, type_name: [*c]u8, resultlen: [*c]c_int) c_int;
pub extern fn PMPI_Type_get_true_extent(datatype: MPI_Datatype, true_lb: [*c]MPI_Aint, true_extent: [*c]MPI_Aint) c_int;
pub extern fn PMPI_Type_get_true_extent_x(datatype: MPI_Datatype, true_lb: [*c]MPI_Count, true_extent: [*c]MPI_Count) c_int;
pub extern fn PMPI_Type_indexed(count: c_int, array_of_blocklengths: [*c]const c_int, array_of_displacements: [*c]const c_int, oldtype: MPI_Datatype, newtype: [*c]MPI_Datatype) c_int;
pub extern fn PMPI_Type_match_size(typeclass: c_int, size: c_int, @"type": [*c]MPI_Datatype) c_int;
pub extern fn PMPI_Type_set_attr(@"type": MPI_Datatype, type_keyval: c_int, attr_val: ?*anyopaque) c_int;
pub extern fn PMPI_Type_set_name(@"type": MPI_Datatype, type_name: [*c]const u8) c_int;
pub extern fn PMPI_Type_size(@"type": MPI_Datatype, size: [*c]c_int) c_int;
pub extern fn PMPI_Type_size_x(@"type": MPI_Datatype, size: [*c]MPI_Count) c_int;
pub extern fn PMPI_Type_vector(count: c_int, blocklength: c_int, stride: c_int, oldtype: MPI_Datatype, newtype: [*c]MPI_Datatype) c_int;
pub extern fn PMPI_Unpack(inbuf: ?*const anyopaque, insize: c_int, position: [*c]c_int, outbuf: ?*anyopaque, outcount: c_int, datatype: MPI_Datatype, comm: MPI_Comm) c_int;
pub extern fn PMPI_Unpublish_name(service_name: [*c]const u8, info: MPI_Info, port_name: [*c]const u8) c_int;
pub extern fn PMPI_Unpack_external(datarep: [*c]const u8, inbuf: ?*const anyopaque, insize: MPI_Aint, position: [*c]MPI_Aint, outbuf: ?*anyopaque, outcount: c_int, datatype: MPI_Datatype) c_int;
pub extern fn PMPI_Waitall(count: c_int, array_of_requests: [*c]MPI_Request, array_of_statuses: [*c]MPI_Status) c_int;
pub extern fn PMPI_Waitany(count: c_int, array_of_requests: [*c]MPI_Request, index: [*c]c_int, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_Wait(request: [*c]MPI_Request, status: [*c]MPI_Status) c_int;
pub extern fn PMPI_Waitsome(incount: c_int, array_of_requests: [*c]MPI_Request, outcount: [*c]c_int, array_of_indices: [*c]c_int, array_of_statuses: [*c]MPI_Status) c_int;
pub extern fn PMPI_Win_allocate(size: MPI_Aint, disp_unit: c_int, info: MPI_Info, comm: MPI_Comm, baseptr: ?*anyopaque, win: [*c]MPI_Win) c_int;
pub extern fn PMPI_Win_allocate_shared(size: MPI_Aint, disp_unit: c_int, info: MPI_Info, comm: MPI_Comm, baseptr: ?*anyopaque, win: [*c]MPI_Win) c_int;
pub extern fn PMPI_Win_attach(win: MPI_Win, base: ?*anyopaque, size: MPI_Aint) c_int;
pub extern fn PMPI_Win_c2f(win: MPI_Win) c_int;
pub extern fn PMPI_Win_call_errhandler(win: MPI_Win, errorcode: c_int) c_int;
pub extern fn PMPI_Win_complete(win: MPI_Win) c_int;
pub extern fn PMPI_Win_create(base: ?*anyopaque, size: MPI_Aint, disp_unit: c_int, info: MPI_Info, comm: MPI_Comm, win: [*c]MPI_Win) c_int;
pub extern fn PMPI_Win_create_dynamic(info: MPI_Info, comm: MPI_Comm, win: [*c]MPI_Win) c_int;
pub extern fn PMPI_Win_create_errhandler(function: ?*const MPI_Win_errhandler_function, errhandler: [*c]MPI_Errhandler) c_int;
pub extern fn PMPI_Win_create_keyval(win_copy_attr_fn: ?*const MPI_Win_copy_attr_function, win_delete_attr_fn: ?*const MPI_Win_delete_attr_function, win_keyval: [*c]c_int, extra_state: ?*anyopaque) c_int;
pub extern fn PMPI_Win_delete_attr(win: MPI_Win, win_keyval: c_int) c_int;
pub extern fn PMPI_Win_detach(win: MPI_Win, base: ?*const anyopaque) c_int;
pub extern fn PMPI_Win_f2c(win: c_int) MPI_Win;
pub extern fn PMPI_Win_fence(mpi_assert: c_int, win: MPI_Win) c_int;
pub extern fn PMPI_Win_flush(rank: c_int, win: MPI_Win) c_int;
pub extern fn PMPI_Win_flush_all(win: MPI_Win) c_int;
pub extern fn PMPI_Win_flush_local(rank: c_int, win: MPI_Win) c_int;
pub extern fn PMPI_Win_flush_local_all(win: MPI_Win) c_int;
pub extern fn PMPI_Win_free(win: [*c]MPI_Win) c_int;
pub extern fn PMPI_Win_free_keyval(win_keyval: [*c]c_int) c_int;
pub extern fn PMPI_Win_get_attr(win: MPI_Win, win_keyval: c_int, attribute_val: ?*anyopaque, flag: [*c]c_int) c_int;
pub extern fn PMPI_Win_get_errhandler(win: MPI_Win, errhandler: [*c]MPI_Errhandler) c_int;
pub extern fn PMPI_Win_get_group(win: MPI_Win, group: [*c]MPI_Group) c_int;
pub extern fn PMPI_Win_get_info(win: MPI_Win, info_used: [*c]MPI_Info) c_int;
pub extern fn PMPI_Win_get_name(win: MPI_Win, win_name: [*c]u8, resultlen: [*c]c_int) c_int;
pub extern fn PMPI_Win_lock(lock_type: c_int, rank: c_int, mpi_assert: c_int, win: MPI_Win) c_int;
pub extern fn PMPI_Win_lock_all(mpi_assert: c_int, win: MPI_Win) c_int;
pub extern fn PMPI_Win_post(group: MPI_Group, mpi_assert: c_int, win: MPI_Win) c_int;
pub extern fn PMPI_Win_set_attr(win: MPI_Win, win_keyval: c_int, attribute_val: ?*anyopaque) c_int;
pub extern fn PMPI_Win_set_errhandler(win: MPI_Win, errhandler: MPI_Errhandler) c_int;
pub extern fn PMPI_Win_set_info(win: MPI_Win, info: MPI_Info) c_int;
pub extern fn PMPI_Win_set_name(win: MPI_Win, win_name: [*c]const u8) c_int;
pub extern fn PMPI_Win_shared_query(win: MPI_Win, rank: c_int, size: [*c]MPI_Aint, disp_unit: [*c]c_int, baseptr: ?*anyopaque) c_int;
pub extern fn PMPI_Win_start(group: MPI_Group, mpi_assert: c_int, win: MPI_Win) c_int;
pub extern fn PMPI_Win_sync(win: MPI_Win) c_int;
pub extern fn PMPI_Win_test(win: MPI_Win, flag: [*c]c_int) c_int;
pub extern fn PMPI_Win_unlock(rank: c_int, win: MPI_Win) c_int;
pub extern fn PMPI_Win_unlock_all(win: MPI_Win) c_int;
pub extern fn PMPI_Win_wait(win: MPI_Win) c_int;
pub extern fn PMPI_Wtick() f64;
pub extern fn PMPI_Wtime() f64;
pub extern fn PMPI_T_init_thread(required: c_int, provided: [*c]c_int) c_int;
pub extern fn PMPI_T_finalize() c_int;
pub extern fn PMPI_T_cvar_get_num(num_cvar: [*c]c_int) c_int;
pub extern fn PMPI_T_cvar_get_info(cvar_index: c_int, name: [*c]u8, name_len: [*c]c_int, verbosity: [*c]c_int, datatype: [*c]MPI_Datatype, enumtype: [*c]MPI_T_enum, desc: [*c]u8, desc_len: [*c]c_int, bind: [*c]c_int, scope: [*c]c_int) c_int;
pub extern fn PMPI_T_cvar_get_index(name: [*c]const u8, cvar_index: [*c]c_int) c_int;
pub extern fn PMPI_T_cvar_handle_alloc(cvar_index: c_int, obj_handle: ?*anyopaque, handle: [*c]MPI_T_cvar_handle, count: [*c]c_int) c_int;
pub extern fn PMPI_T_cvar_handle_free(handle: [*c]MPI_T_cvar_handle) c_int;
pub extern fn PMPI_T_cvar_read(handle: MPI_T_cvar_handle, buf: ?*anyopaque) c_int;
pub extern fn PMPI_T_cvar_write(handle: MPI_T_cvar_handle, buf: ?*const anyopaque) c_int;
pub extern fn PMPI_T_category_get_num(num_cat: [*c]c_int) c_int;
pub extern fn PMPI_T_category_get_info(cat_index: c_int, name: [*c]u8, name_len: [*c]c_int, desc: [*c]u8, desc_len: [*c]c_int, num_cvars: [*c]c_int, num_pvars: [*c]c_int, num_categories: [*c]c_int) c_int;
pub extern fn PMPI_T_category_get_index(name: [*c]const u8, category_index: [*c]c_int) c_int;
pub extern fn PMPI_T_category_get_cvars(cat_index: c_int, len: c_int, indices: [*c]c_int) c_int;
pub extern fn PMPI_T_category_get_pvars(cat_index: c_int, len: c_int, indices: [*c]c_int) c_int;
pub extern fn PMPI_T_category_get_categories(cat_index: c_int, len: c_int, indices: [*c]c_int) c_int;
pub extern fn PMPI_T_category_changed(stamp: [*c]c_int) c_int;
pub extern fn PMPI_T_pvar_get_num(num_pvar: [*c]c_int) c_int;
pub extern fn PMPI_T_pvar_get_info(pvar_index: c_int, name: [*c]u8, name_len: [*c]c_int, verbosity: [*c]c_int, var_class: [*c]c_int, datatype: [*c]MPI_Datatype, enumtype: [*c]MPI_T_enum, desc: [*c]u8, desc_len: [*c]c_int, bind: [*c]c_int, readonly: [*c]c_int, continuous: [*c]c_int, atomic: [*c]c_int) c_int;
pub extern fn PMPI_T_pvar_get_index(name: [*c]const u8, var_class: c_int, pvar_index: [*c]c_int) c_int;
pub extern fn PMPI_T_pvar_session_create(session: [*c]MPI_T_pvar_session) c_int;
pub extern fn PMPI_T_pvar_session_free(session: [*c]MPI_T_pvar_session) c_int;
pub extern fn PMPI_T_pvar_handle_alloc(session: MPI_T_pvar_session, pvar_index: c_int, obj_handle: ?*anyopaque, handle: [*c]MPI_T_pvar_handle, count: [*c]c_int) c_int;
pub extern fn PMPI_T_pvar_handle_free(session: MPI_T_pvar_session, handle: [*c]MPI_T_pvar_handle) c_int;
pub extern fn PMPI_T_pvar_start(session: MPI_T_pvar_session, handle: MPI_T_pvar_handle) c_int;
pub extern fn PMPI_T_pvar_stop(session: MPI_T_pvar_session, handle: MPI_T_pvar_handle) c_int;
pub extern fn PMPI_T_pvar_read(session: MPI_T_pvar_session, handle: MPI_T_pvar_handle, buf: ?*anyopaque) c_int;
pub extern fn PMPI_T_pvar_write(session: MPI_T_pvar_session, handle: MPI_T_pvar_handle, buf: ?*const anyopaque) c_int;
pub extern fn PMPI_T_pvar_reset(session: MPI_T_pvar_session, handle: MPI_T_pvar_handle) c_int;
pub extern fn PMPI_T_pvar_readreset(session: MPI_T_pvar_session, handle: MPI_T_pvar_handle, buf: ?*anyopaque) c_int;
pub extern fn PMPI_T_enum_get_info(enumtype: MPI_T_enum, num: [*c]c_int, name: [*c]u8, name_len: [*c]c_int) c_int;
pub extern fn PMPI_T_enum_get_item(enumtype: MPI_T_enum, index: c_int, value: [*c]c_int, name: [*c]u8, name_len: [*c]c_int) c_int;
pub extern fn MPI_T_init_thread(required: c_int, provided: [*c]c_int) c_int;
pub extern fn MPI_T_finalize() c_int;
pub extern fn MPI_T_cvar_get_num(num_cvar: [*c]c_int) c_int;
pub extern fn MPI_T_cvar_get_info(cvar_index: c_int, name: [*c]u8, name_len: [*c]c_int, verbosity: [*c]c_int, datatype: [*c]MPI_Datatype, enumtype: [*c]MPI_T_enum, desc: [*c]u8, desc_len: [*c]c_int, bind: [*c]c_int, scope: [*c]c_int) c_int;
pub extern fn MPI_T_cvar_get_index(name: [*c]const u8, cvar_index: [*c]c_int) c_int;
pub extern fn MPI_T_cvar_handle_alloc(cvar_index: c_int, obj_handle: ?*anyopaque, handle: [*c]MPI_T_cvar_handle, count: [*c]c_int) c_int;
pub extern fn MPI_T_cvar_handle_free(handle: [*c]MPI_T_cvar_handle) c_int;
pub extern fn MPI_T_cvar_read(handle: MPI_T_cvar_handle, buf: ?*anyopaque) c_int;
pub extern fn MPI_T_cvar_write(handle: MPI_T_cvar_handle, buf: ?*const anyopaque) c_int;
pub extern fn MPI_T_category_get_num(num_cat: [*c]c_int) c_int;
pub extern fn MPI_T_category_get_info(cat_index: c_int, name: [*c]u8, name_len: [*c]c_int, desc: [*c]u8, desc_len: [*c]c_int, num_cvars: [*c]c_int, num_pvars: [*c]c_int, num_categories: [*c]c_int) c_int;
pub extern fn MPI_T_category_get_index(name: [*c]const u8, category_index: [*c]c_int) c_int;
pub extern fn MPI_T_category_get_cvars(cat_index: c_int, len: c_int, indices: [*c]c_int) c_int;
pub extern fn MPI_T_category_get_pvars(cat_index: c_int, len: c_int, indices: [*c]c_int) c_int;
pub extern fn MPI_T_category_get_categories(cat_index: c_int, len: c_int, indices: [*c]c_int) c_int;
pub extern fn MPI_T_category_changed(stamp: [*c]c_int) c_int;
pub extern fn MPI_T_pvar_get_num(num_pvar: [*c]c_int) c_int;
pub extern fn MPI_T_pvar_get_info(pvar_index: c_int, name: [*c]u8, name_len: [*c]c_int, verbosity: [*c]c_int, var_class: [*c]c_int, datatype: [*c]MPI_Datatype, enumtype: [*c]MPI_T_enum, desc: [*c]u8, desc_len: [*c]c_int, bind: [*c]c_int, readonly: [*c]c_int, continuous: [*c]c_int, atomic: [*c]c_int) c_int;
pub extern fn MPI_T_pvar_get_index(name: [*c]const u8, var_class: c_int, pvar_index: [*c]c_int) c_int;
pub extern fn MPI_T_pvar_session_create(session: [*c]MPI_T_pvar_session) c_int;
pub extern fn MPI_T_pvar_session_free(session: [*c]MPI_T_pvar_session) c_int;
pub extern fn MPI_T_pvar_handle_alloc(session: MPI_T_pvar_session, pvar_index: c_int, obj_handle: ?*anyopaque, handle: [*c]MPI_T_pvar_handle, count: [*c]c_int) c_int;
pub extern fn MPI_T_pvar_handle_free(session: MPI_T_pvar_session, handle: [*c]MPI_T_pvar_handle) c_int;
pub extern fn MPI_T_pvar_start(session: MPI_T_pvar_session, handle: MPI_T_pvar_handle) c_int;
pub extern fn MPI_T_pvar_stop(session: MPI_T_pvar_session, handle: MPI_T_pvar_handle) c_int;
pub extern fn MPI_T_pvar_read(session: MPI_T_pvar_session, handle: MPI_T_pvar_handle, buf: ?*anyopaque) c_int;
pub extern fn MPI_T_pvar_write(session: MPI_T_pvar_session, handle: MPI_T_pvar_handle, buf: ?*const anyopaque) c_int;
pub extern fn MPI_T_pvar_reset(session: MPI_T_pvar_session, handle: MPI_T_pvar_handle) c_int;
pub extern fn MPI_T_pvar_readreset(session: MPI_T_pvar_session, handle: MPI_T_pvar_handle, buf: ?*anyopaque) c_int;
pub extern fn MPI_T_enum_get_info(enumtype: MPI_T_enum, num: [*c]c_int, name: [*c]u8, name_len: [*c]c_int) c_int;
pub extern fn MPI_T_enum_get_item(enumtype: MPI_T_enum, index: c_int, value: [*c]c_int, name: [*c]u8, name_len: [*c]c_int) c_int;
pub extern fn MPI_Attr_delete(comm: MPI_Comm, keyval: c_int) c_int;
pub extern fn PMPI_Attr_delete(comm: MPI_Comm, keyval: c_int) c_int;
pub extern fn MPI_Attr_get(comm: MPI_Comm, keyval: c_int, attribute_val: ?*anyopaque, flag: [*c]c_int) c_int;
pub extern fn PMPI_Attr_get(comm: MPI_Comm, keyval: c_int, attribute_val: ?*anyopaque, flag: [*c]c_int) c_int;
pub extern fn MPI_Attr_put(comm: MPI_Comm, keyval: c_int, attribute_val: ?*anyopaque) c_int;
pub extern fn PMPI_Attr_put(comm: MPI_Comm, keyval: c_int, attribute_val: ?*anyopaque) c_int;
pub const MPI_Copy_function = fn (MPI_Comm, c_int, ?*anyopaque, ?*anyopaque, ?*anyopaque, [*c]c_int) callconv(.c) c_int;
pub const MPI_Delete_function = fn (MPI_Comm, c_int, ?*anyopaque, ?*anyopaque) callconv(.c) c_int;
pub extern fn MPI_Keyval_create(copy_fn: ?*const MPI_Copy_function, delete_fn: ?*const MPI_Delete_function, keyval: [*c]c_int, extra_state: ?*anyopaque) c_int;
pub extern fn PMPI_Keyval_create(copy_fn: ?*const MPI_Copy_function, delete_fn: ?*const MPI_Delete_function, keyval: [*c]c_int, extra_state: ?*anyopaque) c_int;
pub extern fn MPI_Keyval_free(keyval: [*c]c_int) c_int;
pub extern fn PMPI_Keyval_free(keyval: [*c]c_int) c_int;
pub extern fn OMPI_C_MPI_DUP_FN(comm: MPI_Comm, comm_keyval: c_int, extra_state: ?*anyopaque, attribute_val_in: ?*anyopaque, attribute_val_out: ?*anyopaque, flag: [*c]c_int) c_int;
pub extern fn OMPI_C_MPI_NULL_COPY_FN(comm: MPI_Comm, comm_keyval: c_int, extra_state: ?*anyopaque, attribute_val_in: ?*anyopaque, attribute_val_out: ?*anyopaque, flag: [*c]c_int) c_int;
pub extern fn OMPI_C_MPI_NULL_DELETE_FN(comm: MPI_Comm, comm_keyval: c_int, attribute_val_out: ?*anyopaque, extra_state: ?*anyopaque) c_int;

pub const __VERSION__ = "Aro 0.0.0";
pub const __Aro__ = "";
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const __STDC_EMBED_NOT_FOUND__ = @as(c_int, 0);
pub const __STDC_EMBED_FOUND__ = @as(c_int, 1);
pub const __STDC_EMBED_EMPTY__ = @as(c_int, 2);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __GNUC__ = @as(c_int, 7);
pub const __GNUC_MINOR__ = @as(c_int, 1);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 0);
pub const __ARO_EMULATE_CLANG__ = @as(c_int, 1);
pub const __ARO_EMULATE_GCC__ = @as(c_int, 2);
pub const __ARO_EMULATE_MSVC__ = @as(c_int, 3);
pub const __ARO_EMULATE__ = __ARO_EMULATE_GCC__;
pub inline fn __building_module(x: anytype) @TypeOf(@as(c_int, 0)) {
    _ = &x;
    return @as(c_int, 0);
}
pub const linux = @as(c_int, 1);
pub const __linux = @as(c_int, 1);
pub const __linux__ = @as(c_int, 1);
pub const unix = @as(c_int, 1);
pub const __unix = @as(c_int, 1);
pub const __unix__ = @as(c_int, 1);
pub const __code_model_small__ = @as(c_int, 1);
pub const __amd64__ = @as(c_int, 1);
pub const __amd64 = @as(c_int, 1);
pub const __x86_64__ = @as(c_int, 1);
pub const __x86_64 = @as(c_int, 1);
pub const __SEG_GS = @as(c_int, 1);
pub const __SEG_FS = @as(c_int, 1);
pub const __seg_gs = @compileError("unable to translate macro: undefined identifier `address_space`"); // <builtin>:32:9
pub const __seg_fs = @compileError("unable to translate macro: undefined identifier `address_space`"); // <builtin>:33:9
pub const __LAHF_SAHF__ = @as(c_int, 1);
pub const __AES__ = @as(c_int, 1);
pub const __VAES__ = @as(c_int, 1);
pub const __PCLMUL__ = @as(c_int, 1);
pub const __VPCLMULQDQ__ = @as(c_int, 1);
pub const __LZCNT__ = @as(c_int, 1);
pub const __RDRND__ = @as(c_int, 1);
pub const __FSGSBASE__ = @as(c_int, 1);
pub const __BMI__ = @as(c_int, 1);
pub const __BMI2__ = @as(c_int, 1);
pub const __POPCNT__ = @as(c_int, 1);
pub const __PRFCHW__ = @as(c_int, 1);
pub const __RDSEED__ = @as(c_int, 1);
pub const __ADX__ = @as(c_int, 1);
pub const __MOVBE__ = @as(c_int, 1);
pub const __FMA__ = @as(c_int, 1);
pub const __F16C__ = @as(c_int, 1);
pub const __GFNI__ = @as(c_int, 1);
pub const __SHA__ = @as(c_int, 1);
pub const __FXSR__ = @as(c_int, 1);
pub const __XSAVE__ = @as(c_int, 1);
pub const __XSAVEOPT__ = @as(c_int, 1);
pub const __XSAVEC__ = @as(c_int, 1);
pub const __XSAVES__ = @as(c_int, 1);
pub const __PKU__ = @as(c_int, 1);
pub const __CLFLUSHOPT__ = @as(c_int, 1);
pub const __CLWB__ = @as(c_int, 1);
pub const __SHSTK__ = @as(c_int, 1);
pub const __KL__ = @as(c_int, 1);
pub const __WIDEKL__ = @as(c_int, 1);
pub const __RDPID__ = @as(c_int, 1);
pub const __WAITPKG__ = @as(c_int, 1);
pub const __MOVDIRI__ = @as(c_int, 1);
pub const __MOVDIR64B__ = @as(c_int, 1);
pub const __PTWRITE__ = @as(c_int, 1);
pub const __INVPCID__ = @as(c_int, 1);
pub const __HRESET__ = @as(c_int, 1);
pub const __AVXVNNI__ = @as(c_int, 1);
pub const __SERIALIZE__ = @as(c_int, 1);
pub const __CRC32__ = @as(c_int, 1);
pub const __AVX2__ = @as(c_int, 1);
pub const __AVX__ = @as(c_int, 1);
pub const __SSE4_2__ = @as(c_int, 1);
pub const __SSE4_1__ = @as(c_int, 1);
pub const __SSSE3__ = @as(c_int, 1);
pub const __SSE3__ = @as(c_int, 1);
pub const __SSE2__ = @as(c_int, 1);
pub const __SSE__ = @as(c_int, 1);
pub const __SSE_MATH__ = @as(c_int, 1);
pub const __MMX__ = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __SIZEOF_FLOAT128__ = @as(c_int, 16);
pub const _LP64 = @as(c_int, 1);
pub const __LP64__ = @as(c_int, 1);
pub const __FLOAT128__ = @as(c_int, 1);
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const __ELF__ = @as(c_int, 1);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __ATOMIC_BOOL_LOCK_FREE = @as(c_int, 1);
pub const __ATOMIC_CHAR_LOCK_FREE = @as(c_int, 1);
pub const __ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 1);
pub const __ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 1);
pub const __ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 1);
pub const __ATOMIC_SHORT_LOCK_FREE = @as(c_int, 1);
pub const __ATOMIC_INT_LOCK_FREE = @as(c_int, 1);
pub const __ATOMIC_LONG_LOCK_FREE = @as(c_int, 1);
pub const __ATOMIC_LLONG_LOCK_FREE = @as(c_int, 1);
pub const __ATOMIC_POINTER_LOCK_FREE = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SCHAR_WIDTH__ = @as(c_int, 8);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_MAX__ = __helpers.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_MAX__ = __helpers.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __LONG_WIDTH__ = @as(c_int, 64);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __LONG_LONG_WIDTH__ = @as(c_int, 64);
pub const __WCHAR_MAX__ = __helpers.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = __helpers.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = __helpers.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = __helpers.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = __helpers.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = __helpers.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = __helpers.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIG_ATOMIC_MAX__ = __helpers.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __BITINT_MAXWIDTH__ = __helpers.promoteIntLiteral(c_int, 65535, .decimal);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 10);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 8);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTPTR_TYPE__ = c_long;
pub const __UINTPTR_TYPE__ = c_ulong;
pub const __INTMAX_TYPE__ = c_long;
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`"); // <builtin>:156:9
pub const __UINTMAX_TYPE__ = c_ulong;
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`"); // <builtin>:158:9
pub const __PTRDIFF_TYPE__ = c_long;
pub const __SIZE_TYPE__ = c_ulong;
pub const __WCHAR_TYPE__ = c_int;
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_long;
pub const __INT64_FMTd__ = "ld";
pub const __INT64_FMTi__ = "li";
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`"); // <builtin>:179:9
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = __helpers.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`"); // <builtin>:201:9
pub const __UINT32_MAX__ = __helpers.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = __helpers.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulong;
pub const __UINT64_FMTo__ = "lo";
pub const __UINT64_FMTu__ = "lu";
pub const __UINT64_FMTx__ = "lx";
pub const __UINT64_FMTX__ = "lX";
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`"); // <builtin>:209:9
pub const __UINT64_MAX__ = __helpers.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __INT64_MAX__ = __helpers.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const INT_LEAST8_FMTd__ = "hhd";
pub const INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const UINT_LEAST8_FMTo__ = "hho";
pub const UINT_LEAST8_FMTu__ = "hhu";
pub const UINT_LEAST8_FMTx__ = "hhx";
pub const UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const INT_FAST8_FMTd__ = "hhd";
pub const INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const UINT_FAST8_FMTo__ = "hho";
pub const UINT_FAST8_FMTu__ = "hhu";
pub const UINT_FAST8_FMTx__ = "hhx";
pub const UINT_FAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const INT_LEAST16_FMTd__ = "hd";
pub const INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = __helpers.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT_LEAST16_FMTo__ = "ho";
pub const UINT_LEAST16_FMTu__ = "hu";
pub const UINT_LEAST16_FMTx__ = "hx";
pub const UINT_LEAST16_FMTX__ = "hX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const INT_FAST16_FMTd__ = "hd";
pub const INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = __helpers.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT_FAST16_FMTo__ = "ho";
pub const UINT_FAST16_FMTu__ = "hu";
pub const UINT_FAST16_FMTx__ = "hx";
pub const UINT_FAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = __helpers.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const INT_LEAST32_FMTd__ = "d";
pub const INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = __helpers.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const UINT_LEAST32_FMTo__ = "o";
pub const UINT_LEAST32_FMTu__ = "u";
pub const UINT_LEAST32_FMTx__ = "x";
pub const UINT_LEAST32_FMTX__ = "X";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = __helpers.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const INT_FAST32_FMTd__ = "d";
pub const INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = __helpers.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const UINT_FAST32_FMTo__ = "o";
pub const UINT_FAST32_FMTu__ = "u";
pub const UINT_FAST32_FMTx__ = "x";
pub const UINT_FAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_long;
pub const __INT_LEAST64_MAX__ = __helpers.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const INT_LEAST64_FMTd__ = "ld";
pub const INT_LEAST64_FMTi__ = "li";
pub const __UINT_LEAST64_TYPE__ = c_ulong;
pub const __UINT_LEAST64_MAX__ = __helpers.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const UINT_LEAST64_FMTo__ = "lo";
pub const UINT_LEAST64_FMTu__ = "lu";
pub const UINT_LEAST64_FMTx__ = "lx";
pub const UINT_LEAST64_FMTX__ = "lX";
pub const __INT_FAST64_TYPE__ = c_long;
pub const __INT_FAST64_MAX__ = __helpers.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const INT_FAST64_FMTd__ = "ld";
pub const INT_FAST64_FMTi__ = "li";
pub const __UINT_FAST64_TYPE__ = c_ulong;
pub const __UINT_FAST64_MAX__ = __helpers.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const UINT_FAST64_FMTo__ = "lo";
pub const UINT_FAST64_FMTu__ = "lu";
pub const UINT_FAST64_FMTx__ = "lx";
pub const UINT_FAST64_FMTX__ = "lX";
pub const __FLT16_DENORM_MIN__ = @as(f16, 5.9604644775390625e-8);
pub const __FLT16_HAS_DENORM__ = "";
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_EPSILON__ = @as(f16, 9.765625e-4);
pub const __FLT16_HAS_INFINITY__ = "";
pub const __FLT16_HAS_QUIET_NAN__ = "";
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT16_MIN__ = @as(f16, 6.103515625e-5);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = "";
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = "";
pub const __FLT_HAS_QUIET_NAN__ = "";
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_HAS_DENORM__ = "";
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = "";
pub const __DBL_HAS_QUIET_NAN__ = "";
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_HAS_DENORM__ = "";
pub const __LDBL_DIG__ = @as(c_int, 18);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 21);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = "";
pub const __LDBL_HAS_QUIET_NAN__ = "";
pub const __LDBL_MANT_DIG__ = @as(c_int, 64);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 4932);
pub const __LDBL_MAX_EXP__ = @as(c_int, 16384);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 4931);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 16381);
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __FLT_EVAL_METHOD__ = @as(c_int, 0);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const OMPI_MPI_H = "";
pub const OPAL_BUILD_PLATFORM_COMPILER_FAMILYID = @as(c_int, 1);
pub const OPAL_BUILD_PLATFORM_COMPILER_VERSION = __helpers.promoteIntLiteral(c_int, 983296, .decimal);
pub const OPAL_STDC_HEADERS = @as(c_int, 1);
pub const OPAL_HAVE_ATTRIBUTE_DEPRECATED = @as(c_int, 1);
pub const OPAL_HAVE_ATTRIBUTE_DEPRECATED_ARGUMENT = @as(c_int, 1);
pub const OPAL_HAVE_ATTRIBUTE_ERROR = @as(c_int, 1);
pub const OPAL_HAVE_SYS_TIME_H = @as(c_int, 1);
pub const OPAL_HAVE_LONG_LONG = @as(c_int, 1);
pub const OPAL_MAX_DATAREP_STRING = @as(c_int, 128);
pub const OPAL_MAX_ERROR_STRING = @as(c_int, 256);
pub const OPAL_MAX_INFO_KEY = @as(c_int, 36);
pub const OPAL_MAX_INFO_VAL = @as(c_int, 256);
pub const OPAL_MAX_OBJECT_NAME = @as(c_int, 64);
pub const OPAL_MAX_PORT_NAME = @as(c_int, 1024);
pub const OPAL_MAX_PROCESSOR_NAME = @as(c_int, 256);
pub const OPAL_MAX_PSET_NAME_LEN = @as(c_int, 512);
pub const OPAL_MAX_STRINGTAG_LEN = @as(c_int, 1024);
pub const OMPI_FORTRAN_STATUS_SIZE = @as(c_int, 6);
pub const OMPI_HAVE_FORTRAN_LOGICAL1 = @as(c_int, 0);
pub const OMPI_HAVE_FORTRAN_LOGICAL2 = @as(c_int, 0);
pub const OMPI_HAVE_FORTRAN_LOGICAL4 = @as(c_int, 0);
pub const OMPI_HAVE_FORTRAN_LOGICAL8 = @as(c_int, 0);
pub const OMPI_HAVE_FORTRAN_INTEGER1 = @as(c_int, 0);
pub const OMPI_HAVE_FORTRAN_INTEGER16 = @as(c_int, 0);
pub const OMPI_HAVE_FORTRAN_INTEGER2 = @as(c_int, 0);
pub const OMPI_HAVE_FORTRAN_INTEGER4 = @as(c_int, 0);
pub const OMPI_HAVE_FORTRAN_INTEGER8 = @as(c_int, 0);
pub const OMPI_HAVE_FORTRAN_REAL16 = @as(c_int, 0);
pub const OMPI_HAVE_FORTRAN_REAL2 = @as(c_int, 0);
pub const OMPI_HAVE_FORTRAN_REAL4 = @as(c_int, 0);
pub const OMPI_HAVE_FORTRAN_REAL8 = @as(c_int, 0);
pub const OMPI_ENABLE_MPI1_COMPAT = @as(c_int, 0);
pub const HAVE_FLOAT__COMPLEX = @as(c_int, 1);
pub const HAVE_DOUBLE__COMPLEX = @as(c_int, 1);
pub const HAVE_LONG_DOUBLE__COMPLEX = @as(c_int, 1);
pub const OMPI_MPI_AINT_TYPE = ptrdiff_t;
pub const OMPI_MPI_OFFSET_TYPE = c_longlong;
pub const OMPI_OFFSET_DATATYPE = MPI_LONG_LONG;
pub const OMPI_MPI_OFFSET_SIZE = @as(c_int, 8);
pub const OMPI_MPI_COUNT_TYPE = c_longlong;
pub const OMPI_PARAM_CHECK = @as(c_int, 1);
pub const OMPI_WANT_MPI_INTERFACE_WARNING = @as(c_int, 1);
pub const OMPI_MAJOR_VERSION = @as(c_int, 5);
pub const OMPI_MINOR_VERSION = @as(c_int, 0);
pub const OMPI_RELEASE_VERSION = @as(c_int, 8);
pub const MPI_VERSION = @as(c_int, 3);
pub const MPI_SUBVERSION = @as(c_int, 1);
pub const ompi_fortran_bogus_type_t = c_int;
pub const ompi_fortran_integer_t = ompi_fortran_bogus_type_t;
pub const OPAL_C_HAVE_VISIBILITY = @as(c_int, 1);
pub const OMPI_DECLSPEC = @compileError("unable to translate macro: undefined identifier `visibility`"); // /usr/include/mpi.h:228:16
pub const MPI_Fint = ompi_fortran_integer_t;
pub const __STDC_VERSION_STDDEF_H__ = @as(c_long, 202311);
pub const NULL = __helpers.cast(?*anyopaque, @as(c_int, 0));
pub const offsetof = @compileError("unable to translate macro: undefined identifier `__builtin_offsetof`"); // /home/dan/.cache/zig/p/aro-0.0.0-JSD1QlCHNQA1XcMUCOD9hOhVATN25SEawDuAl9L3kxf-/include/stddef.h:18:9
pub const OMPI_BUILDING = @as(c_int, 0);
pub const OPEN_MPI = @as(c_int, 1);
pub const OMPI_CLEANUP_SIZEOF_VOID_P = @as(c_int, 1);
pub const SIZEOF_VOID_P = @as(c_int, 8);
pub const PLATFORM_HEADER_VERSION = @as(c_int, 22);
pub const _PORTABLE_PLATFORM_H = PLATFORM_HEADER_VERSION;
pub const OMPI_PORTABLE_PLATFORM_H = "";
pub const OPAL_PORTABLE_PLATFORM_H = "";
pub const _PLATFORM_STRINGIFY_HELPER = @compileError("unable to translate C expr: unexpected token ''"); // /usr/include/mpi_portable_platform.h:193:9
pub inline fn PLATFORM_STRINGIFY(x: anytype) @TypeOf(_PLATFORM_STRINGIFY_HELPER(x)) {
    _ = &x;
    return _PLATFORM_STRINGIFY_HELPER(x);
}
pub const PLATFORM_COMPILER_GNU = @as(c_int, 1);
pub const PLATFORM_COMPILER_FAMILYNAME = @compileError("unable to translate macro: undefined identifier `GNU`"); // /usr/include/mpi_portable_platform.h:612:13
pub const PLATFORM_COMPILER_FAMILYID = @as(c_int, 1);
pub const PLATFORM_COMPILER_GNU_C = @as(c_int, 1);
pub const PLATFORM_COMPILER_VERSION = PLATFORM_COMPILER_VERSION_INT(__GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__);
pub const PLATFORM_COMPILER_VERSION_STR = __PLATFORM_COMPILER_GNU_VERSION_STR;
pub const __PLATFORM_COMPILER_GNU_VERSION_STR = PLATFORM_STRINGIFY(__GNUC__) ++ "." ++ PLATFORM_STRINGIFY(__GNUC_MINOR__) ++ "." ++ PLATFORM_STRINGIFY(__GNUC_PATCHLEVEL__);
pub inline fn PLATFORM_COMPILER_VERSION_INT(maj: anytype, min: anytype, pat: anytype) @TypeOf(((maj << @as(c_int, 16)) | (min << @as(c_int, 8))) | pat) {
    _ = &maj;
    _ = &min;
    _ = &pat;
    return ((maj << @as(c_int, 16)) | (min << @as(c_int, 8))) | pat;
}
pub inline fn PLATFORM_COMPILER_VERSION_GT(maj: anytype, min: anytype, pat: anytype) @TypeOf(PLATFORM_COMPILER_VERSION > PLATFORM_COMPILER_VERSION_INT(maj, min, pat)) {
    _ = &maj;
    _ = &min;
    _ = &pat;
    return PLATFORM_COMPILER_VERSION > PLATFORM_COMPILER_VERSION_INT(maj, min, pat);
}
pub inline fn PLATFORM_COMPILER_VERSION_GE(maj: anytype, min: anytype, pat: anytype) @TypeOf(PLATFORM_COMPILER_VERSION >= PLATFORM_COMPILER_VERSION_INT(maj, min, pat)) {
    _ = &maj;
    _ = &min;
    _ = &pat;
    return PLATFORM_COMPILER_VERSION >= PLATFORM_COMPILER_VERSION_INT(maj, min, pat);
}
pub inline fn PLATFORM_COMPILER_VERSION_EQ(maj: anytype, min: anytype, pat: anytype) @TypeOf(PLATFORM_COMPILER_VERSION == PLATFORM_COMPILER_VERSION_INT(maj, min, pat)) {
    _ = &maj;
    _ = &min;
    _ = &pat;
    return PLATFORM_COMPILER_VERSION == PLATFORM_COMPILER_VERSION_INT(maj, min, pat);
}
pub inline fn PLATFORM_COMPILER_VERSION_LE(maj: anytype, min: anytype, pat: anytype) @TypeOf(PLATFORM_COMPILER_VERSION <= PLATFORM_COMPILER_VERSION_INT(maj, min, pat)) {
    _ = &maj;
    _ = &min;
    _ = &pat;
    return PLATFORM_COMPILER_VERSION <= PLATFORM_COMPILER_VERSION_INT(maj, min, pat);
}
pub inline fn PLATFORM_COMPILER_VERSION_LT(maj: anytype, min: anytype, pat: anytype) @TypeOf(PLATFORM_COMPILER_VERSION < PLATFORM_COMPILER_VERSION_INT(maj, min, pat)) {
    _ = &maj;
    _ = &min;
    _ = &pat;
    return PLATFORM_COMPILER_VERSION < PLATFORM_COMPILER_VERSION_INT(maj, min, pat);
}
pub const PLATFORM_COMPILER_ID = PLATFORM_COMPILER_FAMILYID;
pub const PLATFORM_COMPILER_C_LANGLVL = __STDC_VERSION__;
pub const _PLATFORM_COMPILER_STD_STDC = "__STDC__";
pub const _PLATFORM_COMPILER_STD_STDC_VERSION = ",__STDC_VERSION__=" ++ PLATFORM_STRINGIFY(__STDC_VERSION__);
pub const _PLATFORM_COMPILER_STD_STDC_EXT = "";
pub const _PLATFORM_COMPILER_STD_CPLUSPLUS = "";
pub const _PLATFORM_COMPILER_MISC_VERSION_STR = "|misc:" ++ __VERSION__;
pub const _PLATFORM_COMPILER_GNU_VERSION_STR_HELP = "";
pub const PLATFORM_COMPILER_IDSTR = "|COMPILER_FAMILY:" ++ PLATFORM_STRINGIFY(PLATFORM_COMPILER_FAMILYNAME) ++ "|COMPILER_VERSION:" ++ PLATFORM_COMPILER_VERSION_STR ++ "|COMPILER_FAMILYID:" ++ PLATFORM_STRINGIFY(PLATFORM_COMPILER_FAMILYID) ++ "|STD:" ++ _PLATFORM_COMPILER_STD_STDC ++ _PLATFORM_COMPILER_STD_STDC_VERSION ++ _PLATFORM_COMPILER_MISC_VERSION_STR ++ "|";
pub const PLATFORM_OS_LINUX = @as(c_int, 1);
pub const PLATFORM_OS_FAMILYNAME = @compileError("unable to translate macro: undefined identifier `LINUX`"); // /usr/include/mpi_portable_platform.h:787:11
pub const PLATFORM_ARCH_X86_64 = @as(c_int, 1);
pub const PLATFORM_ARCH_FAMILYNAME = @compileError("unable to translate macro: undefined identifier `X86_64`"); // /usr/include/mpi_portable_platform.h:911:11
pub const PLATFORM_ARCH_LITTLE_ENDIAN = @as(c_int, 1);
pub const PLATFORM_ARCH_64 = @as(c_int, 1);
pub const __mpi_interface_deprecated__ = @compileError("unable to translate C expr: unexpected token ''"); // /usr/include/mpi.h:372:13
pub const __mpi_interface_removed__ = @compileError("unable to translate C expr: unexpected token ''"); // /usr/include/mpi.h:376:13
pub const THIS_SYMBOL_WAS_REMOVED_IN_MPI30 = @compileError("unable to translate C expr: unexpected token ''"); // /usr/include/mpi.h:380:13
pub const THIS_FUNCTION_WAS_REMOVED_IN_MPI30 = @compileError("unable to translate C expr: unexpected token ''"); // /usr/include/mpi.h:383:13
pub const OMPI_REMOVED_USE_STATIC_ASSERT = @as(c_int, 0);
pub const OMPI_OMIT_MPI1_COMPAT_DECLS = !((OMPI_ENABLE_MPI1_COMPAT != 0) or (OMPI_BUILDING != 0));
pub const MPIO_Request = MPI_Request;
pub const MPIO_Test = MPI_Test;
pub const MPIO_Wait = MPI_Wait;
pub inline fn OMPI_PREDEFINED_GLOBAL(@"type": anytype, global: anytype) @"type" {
    return @ptrCast(global);
}
pub const MPI_ANY_SOURCE = -@as(c_int, 1);
pub const MPI_PROC_NULL = -@as(c_int, 2);
pub const MPI_ROOT = -@as(c_int, 4);
pub const MPI_ANY_TAG = -@as(c_int, 1);
pub const MPI_MAX_PROCESSOR_NAME = OPAL_MAX_PROCESSOR_NAME;
pub const MPI_MAX_ERROR_STRING = OPAL_MAX_ERROR_STRING;
pub const MPI_MAX_OBJECT_NAME = OPAL_MAX_OBJECT_NAME;
pub const MPI_MAX_LIBRARY_VERSION_STRING = @as(c_int, 256);
pub const MPI_UNDEFINED = -@as(c_int, 32766);
pub const MPI_DIST_GRAPH = @as(c_int, 3);
pub const MPI_CART = @as(c_int, 1);
pub const MPI_GRAPH = @as(c_int, 2);
pub const MPI_KEYVAL_INVALID = -@as(c_int, 1);
pub const MPI_UNWEIGHTED = __helpers.cast([*c]c_int, @as(c_int, 2));
pub const MPI_WEIGHTS_EMPTY = __helpers.cast([*c]c_int, @as(c_int, 3));
pub const MPI_BOTTOM = __helpers.cast(?*anyopaque, @as(c_int, 0));
pub const MPI_IN_PLACE = __helpers.cast(?*anyopaque, @as(c_int, 1));
pub const MPI_BSEND_OVERHEAD = @as(c_int, 128);
pub const MPI_MAX_INFO_KEY = OPAL_MAX_INFO_KEY;
pub const MPI_MAX_INFO_VAL = OPAL_MAX_INFO_VAL;
pub const MPI_ARGV_NULL = @compileError("unable to translate C expr: expected ')' instead got '*'"); // /usr/include/mpi.h:559:9
pub const MPI_ARGVS_NULL = @compileError("unable to translate C expr: expected ')' instead got '*'"); // /usr/include/mpi.h:560:9
pub const MPI_ERRCODES_IGNORE = __helpers.cast([*c]c_int, @as(c_int, 0));
pub const MPI_MAX_PORT_NAME = OPAL_MAX_PORT_NAME;
pub const MPI_ORDER_C = @as(c_int, 0);
pub const MPI_ORDER_FORTRAN = @as(c_int, 1);
pub const MPI_DISTRIBUTE_BLOCK = @as(c_int, 0);
pub const MPI_DISTRIBUTE_CYCLIC = @as(c_int, 1);
pub const MPI_DISTRIBUTE_NONE = @as(c_int, 2);
pub const MPI_DISTRIBUTE_DFLT_DARG = -@as(c_int, 1);
pub const MPI_MAX_PSET_NAME_LEN = OPAL_MAX_PSET_NAME_LEN;
pub const MPI_MAX_STRINGTAG_LEN = OPAL_MAX_STRINGTAG_LEN;
pub const MPI_F_STATUS_SIZE = OMPI_FORTRAN_STATUS_SIZE;
pub const MPI_F_SOURCE = @as(c_int, 0);
pub const MPI_F_TAG = @as(c_int, 1);
pub const MPI_F_ERROR = @as(c_int, 2);
pub const MPI_MODE_CREATE = @as(c_int, 1);
pub const MPI_MODE_RDONLY = @as(c_int, 2);
pub const MPI_MODE_WRONLY = @as(c_int, 4);
pub const MPI_MODE_RDWR = @as(c_int, 8);
pub const MPI_MODE_DELETE_ON_CLOSE = @as(c_int, 16);
pub const MPI_MODE_UNIQUE_OPEN = @as(c_int, 32);
pub const MPI_MODE_EXCL = @as(c_int, 64);
pub const MPI_MODE_APPEND = @as(c_int, 128);
pub const MPI_MODE_SEQUENTIAL = @as(c_int, 256);
pub const MPI_DISPLACEMENT_CURRENT = -__helpers.promoteIntLiteral(c_int, 54278278, .decimal);
pub const MPI_SEEK_SET = @as(c_int, 600);
pub const MPI_SEEK_CUR = @as(c_int, 602);
pub const MPI_SEEK_END = @as(c_int, 604);
pub const MPI_MAX_DATAREP_STRING = OPAL_MAX_DATAREP_STRING;
pub const MPI_MODE_NOCHECK = @as(c_int, 1);
pub const MPI_MODE_NOPRECEDE = @as(c_int, 2);
pub const MPI_MODE_NOPUT = @as(c_int, 4);
pub const MPI_MODE_NOSTORE = @as(c_int, 8);
pub const MPI_MODE_NOSUCCEED = @as(c_int, 16);
pub const MPI_LOCK_EXCLUSIVE = @as(c_int, 1);
pub const MPI_LOCK_SHARED = @as(c_int, 2);
pub const MPI_WIN_FLAVOR_CREATE = @as(c_int, 1);
pub const MPI_WIN_FLAVOR_ALLOCATE = @as(c_int, 2);
pub const MPI_WIN_FLAVOR_DYNAMIC = @as(c_int, 3);
pub const MPI_WIN_FLAVOR_SHARED = @as(c_int, 4);
pub const MPI_WIN_UNIFIED = @as(c_int, 0);
pub const MPI_WIN_SEPARATE = @as(c_int, 1);
pub const MPI_SUCCESS = @as(c_int, 0);
pub const MPI_ERR_BUFFER = @as(c_int, 1);
pub const MPI_ERR_COUNT = @as(c_int, 2);
pub const MPI_ERR_TYPE = @as(c_int, 3);
pub const MPI_ERR_TAG = @as(c_int, 4);
pub const MPI_ERR_COMM = @as(c_int, 5);
pub const MPI_ERR_RANK = @as(c_int, 6);
pub const MPI_ERR_REQUEST = @as(c_int, 7);
pub const MPI_ERR_ROOT = @as(c_int, 8);
pub const MPI_ERR_GROUP = @as(c_int, 9);
pub const MPI_ERR_OP = @as(c_int, 10);
pub const MPI_ERR_TOPOLOGY = @as(c_int, 11);
pub const MPI_ERR_DIMS = @as(c_int, 12);
pub const MPI_ERR_ARG = @as(c_int, 13);
pub const MPI_ERR_UNKNOWN = @as(c_int, 14);
pub const MPI_ERR_TRUNCATE = @as(c_int, 15);
pub const MPI_ERR_OTHER = @as(c_int, 16);
pub const MPI_ERR_INTERN = @as(c_int, 17);
pub const MPI_ERR_IN_STATUS = @as(c_int, 18);
pub const MPI_ERR_PENDING = @as(c_int, 19);
pub const MPI_ERR_ACCESS = @as(c_int, 20);
pub const MPI_ERR_AMODE = @as(c_int, 21);
pub const MPI_ERR_ASSERT = @as(c_int, 22);
pub const MPI_ERR_BAD_FILE = @as(c_int, 23);
pub const MPI_ERR_BASE = @as(c_int, 24);
pub const MPI_ERR_CONVERSION = @as(c_int, 25);
pub const MPI_ERR_DISP = @as(c_int, 26);
pub const MPI_ERR_DUP_DATAREP = @as(c_int, 27);
pub const MPI_ERR_FILE_EXISTS = @as(c_int, 28);
pub const MPI_ERR_FILE_IN_USE = @as(c_int, 29);
pub const MPI_ERR_FILE = @as(c_int, 30);
pub const MPI_ERR_INFO_KEY = @as(c_int, 31);
pub const MPI_ERR_INFO_NOKEY = @as(c_int, 32);
pub const MPI_ERR_INFO_VALUE = @as(c_int, 33);
pub const MPI_ERR_INFO = @as(c_int, 34);
pub const MPI_ERR_IO = @as(c_int, 35);
pub const MPI_ERR_KEYVAL = @as(c_int, 36);
pub const MPI_ERR_LOCKTYPE = @as(c_int, 37);
pub const MPI_ERR_NAME = @as(c_int, 38);
pub const MPI_ERR_NO_MEM = @as(c_int, 39);
pub const MPI_ERR_NOT_SAME = @as(c_int, 40);
pub const MPI_ERR_NO_SPACE = @as(c_int, 41);
pub const MPI_ERR_NO_SUCH_FILE = @as(c_int, 42);
pub const MPI_ERR_PORT = @as(c_int, 43);
pub const MPI_ERR_QUOTA = @as(c_int, 44);
pub const MPI_ERR_READ_ONLY = @as(c_int, 45);
pub const MPI_ERR_RMA_CONFLICT = @as(c_int, 46);
pub const MPI_ERR_RMA_SYNC = @as(c_int, 47);
pub const MPI_ERR_SERVICE = @as(c_int, 48);
pub const MPI_ERR_SIZE = @as(c_int, 49);
pub const MPI_ERR_SPAWN = @as(c_int, 50);
pub const MPI_ERR_UNSUPPORTED_DATAREP = @as(c_int, 51);
pub const MPI_ERR_UNSUPPORTED_OPERATION = @as(c_int, 52);
pub const MPI_ERR_WIN = @as(c_int, 53);
pub const MPI_T_ERR_MEMORY = @as(c_int, 54);
pub const MPI_T_ERR_NOT_INITIALIZED = @as(c_int, 55);
pub const MPI_T_ERR_CANNOT_INIT = @as(c_int, 56);
pub const MPI_T_ERR_INVALID_INDEX = @as(c_int, 57);
pub const MPI_T_ERR_INVALID_ITEM = @as(c_int, 58);
pub const MPI_T_ERR_INVALID_HANDLE = @as(c_int, 59);
pub const MPI_T_ERR_OUT_OF_HANDLES = @as(c_int, 60);
pub const MPI_T_ERR_OUT_OF_SESSIONS = @as(c_int, 61);
pub const MPI_T_ERR_INVALID_SESSION = @as(c_int, 62);
pub const MPI_T_ERR_CVAR_SET_NOT_NOW = @as(c_int, 63);
pub const MPI_T_ERR_CVAR_SET_NEVER = @as(c_int, 64);
pub const MPI_T_ERR_PVAR_NO_STARTSTOP = @as(c_int, 65);
pub const MPI_T_ERR_PVAR_NO_WRITE = @as(c_int, 66);
pub const MPI_T_ERR_PVAR_NO_ATOMIC = @as(c_int, 67);
pub const MPI_ERR_RMA_RANGE = @as(c_int, 68);
pub const MPI_ERR_RMA_ATTACH = @as(c_int, 69);
pub const MPI_ERR_RMA_FLAVOR = @as(c_int, 70);
pub const MPI_ERR_RMA_SHARED = @as(c_int, 71);
pub const MPI_T_ERR_INVALID = @as(c_int, 72);
pub const MPI_T_ERR_INVALID_NAME = @as(c_int, 73);
pub const MPI_ERR_PROC_ABORTED = @as(c_int, 74);
pub const MPI_ERR_PROC_FAILED = @as(c_int, 75);
pub const MPI_ERR_PROC_FAILED_PENDING = @as(c_int, 76);
pub const MPI_ERR_REVOKED = @as(c_int, 77);
pub const MPI_ERR_SESSION = @as(c_int, 78);
pub const MPI_ERR_VALUE_TOO_LARGE = @as(c_int, 79);
pub const MPI_ERR_LASTCODE = @as(c_int, 92);
pub const OMPI_COMM_TYPE_NODE = MPI_COMM_TYPE_SHARED;
// /usr/include/mpi.h:914:9: warning: macro 'MPI_SESSION_NULL' contains a runtime value, translated to function
pub inline fn MPI_SESSION_NULL() @TypeOf(OMPI_PREDEFINED_GLOBAL(MPI_Session, ompi_mpi_instance_null)) {
    return OMPI_PREDEFINED_GLOBAL(MPI_Session, ompi_mpi_instance_null);
}
pub const MPI_GROUP_NULL = OMPI_PREDEFINED_GLOBAL(MPI_Group, ompi_mpi_group_null);
pub const MPI_COMM_NULL = OMPI_PREDEFINED_GLOBAL(MPI_Comm, ompi_mpi_comm_null);
// /usr/include/mpi.h:917:9: warning: macro 'MPI_REQUEST_NULL' contains a runtime value, translated to function
pub inline fn MPI_REQUEST_NULL() @TypeOf(OMPI_PREDEFINED_GLOBAL(MPI_Request, ompi_request_null)) {
    return OMPI_PREDEFINED_GLOBAL(MPI_Request, ompi_request_null);
}
// /usr/include/mpi.h:918:9: warning: macro 'MPI_MESSAGE_NULL' contains a runtime value, translated to function
pub inline fn MPI_MESSAGE_NULL() @TypeOf(OMPI_PREDEFINED_GLOBAL(MPI_Message, ompi_message_null)) {
    return OMPI_PREDEFINED_GLOBAL(MPI_Message, ompi_message_null);
}
// /usr/include/mpi.h:919:9: warning: macro 'MPI_OP_NULL' contains a runtime value, translated to function
pub inline fn MPI_OP_NULL() @TypeOf(OMPI_PREDEFINED_GLOBAL(MPI_Op, ompi_mpi_op_null)) {
    return OMPI_PREDEFINED_GLOBAL(MPI_Op, ompi_mpi_op_null);
}
// /usr/include/mpi.h:920:9: warning: macro 'MPI_ERRHANDLER_NULL' contains a runtime value, translated to function
pub inline fn MPI_ERRHANDLER_NULL() @TypeOf(OMPI_PREDEFINED_GLOBAL(MPI_Errhandler, ompi_mpi_errhandler_null)) {
    return OMPI_PREDEFINED_GLOBAL(MPI_Errhandler, ompi_mpi_errhandler_null);
}
// /usr/include/mpi.h:921:9: warning: macro 'MPI_INFO_NULL' contains a runtime value, translated to function
pub inline fn MPI_INFO_NULL() @TypeOf(OMPI_PREDEFINED_GLOBAL(MPI_Info, ompi_mpi_info_null)) {
    return OMPI_PREDEFINED_GLOBAL(MPI_Info, ompi_mpi_info_null);
}
// /usr/include/mpi.h:922:9: warning: macro 'MPI_WIN_NULL' contains a runtime value, translated to function
pub inline fn MPI_WIN_NULL() @TypeOf(OMPI_PREDEFINED_GLOBAL(MPI_Win, ompi_mpi_win_null)) {
    return OMPI_PREDEFINED_GLOBAL(MPI_Win, ompi_mpi_win_null);
}
// /usr/include/mpi.h:923:9: warning: macro 'MPI_FILE_NULL' contains a runtime value, translated to function
pub inline fn MPI_FILE_NULL() @TypeOf(OMPI_PREDEFINED_GLOBAL(MPI_File, ompi_mpi_file_null)) {
    return OMPI_PREDEFINED_GLOBAL(MPI_File, ompi_mpi_file_null);
}
pub const MPI_T_ENUM_NULL = __helpers.cast(MPI_T_enum, NULL);
pub const MPI_INFO_ENV = OMPI_PREDEFINED_GLOBAL(MPI_Info, ompi_mpi_info_env);
pub const MPI_STATUS_IGNORE = __helpers.cast([*c]MPI_Status, @as(c_int, 0));
pub const MPI_STATUSES_IGNORE = __helpers.cast([*c]MPI_Status, @as(c_int, 0));
pub const MPI_T_PVAR_ALL_HANDLES = __helpers.cast(MPI_T_pvar_handle, -@as(c_int, 1));
pub const MPI_T_PVAR_HANDLE_NULL = __helpers.cast(MPI_T_pvar_handle, @as(c_int, 0));
pub const MPI_T_PVAR_SESSION_NULL = __helpers.cast(MPI_T_pvar_session, @as(c_int, 0));
pub const MPI_T_CVAR_HANDLE_NULL = __helpers.cast(MPI_T_cvar_handle, @as(c_int, 0));
pub const MPI_TYPE_NULL_DELETE_FN = OMPI_C_MPI_TYPE_NULL_DELETE_FN;
pub const MPI_TYPE_NULL_COPY_FN = OMPI_C_MPI_TYPE_NULL_COPY_FN;
pub const MPI_TYPE_DUP_FN = OMPI_C_MPI_TYPE_DUP_FN;
pub const MPI_COMM_NULL_DELETE_FN = OMPI_C_MPI_COMM_NULL_DELETE_FN;
pub const MPI_COMM_NULL_COPY_FN = OMPI_C_MPI_COMM_NULL_COPY_FN;
pub const MPI_COMM_DUP_FN = OMPI_C_MPI_COMM_DUP_FN;
pub const MPI_WIN_NULL_DELETE_FN = OMPI_C_MPI_WIN_NULL_DELETE_FN;
pub const MPI_WIN_NULL_COPY_FN = OMPI_C_MPI_WIN_NULL_COPY_FN;
pub const MPI_WIN_DUP_FN = OMPI_C_MPI_WIN_DUP_FN;
pub const MPI_CONVERSION_FN_NULL = __helpers.cast([*c]MPI_Datarep_conversion_function, @as(c_int, 0));
// /usr/include/mpi.h:1209:9: warning: macro 'MPI_COMM_WORLD' contains a runtime value, translated to function
pub inline fn MPI_COMM_WORLD() MPI_Comm {
    return OMPI_PREDEFINED_GLOBAL(MPI_Comm, &ompi_mpi_comm_world);
}
pub const MPI_COMM_SELF = OMPI_PREDEFINED_GLOBAL(MPI_Comm, &ompi_mpi_comm_self);
// /usr/include/mpi.h:1212:9: warning: macro 'MPI_GROUP_EMPTY' contains a runtime value, translated to function
pub inline fn MPI_GROUP_EMPTY() MPI_Group {
    return OMPI_PREDEFINED_GLOBAL(MPI_Group, &ompi_mpi_group_empty);
}
pub const MPI_MESSAGE_NO_PROC = OMPI_PREDEFINED_GLOBAL(MPI_Message, ompi_message_no_proc);
pub const MPI_MAX = OMPI_PREDEFINED_GLOBAL(MPI_Op, &ompi_mpi_op_max);
pub const MPI_MIN = OMPI_PREDEFINED_GLOBAL(MPI_Op, &ompi_mpi_op_min);
pub const MPI_SUM = OMPI_PREDEFINED_GLOBAL(MPI_Op, &ompi_mpi_op_sum);
pub const MPI_PROD = OMPI_PREDEFINED_GLOBAL(MPI_Op,& ompi_mpi_op_prod);
pub const MPI_LAND = OMPI_PREDEFINED_GLOBAL(MPI_Op, &ompi_mpi_op_land);
pub const MPI_BAND = OMPI_PREDEFINED_GLOBAL(MPI_Op, &ompi_mpi_op_band);
pub const MPI_LOR = OMPI_PREDEFINED_GLOBAL(MPI_Op, &ompi_mpi_op_lor);
pub const MPI_BOR = OMPI_PREDEFINED_GLOBAL(MPI_Op, &ompi_mpi_op_bor);
pub const MPI_LXOR = OMPI_PREDEFINED_GLOBAL(MPI_Op, &ompi_mpi_op_lxor);
pub const MPI_BXOR = OMPI_PREDEFINED_GLOBAL(MPI_Op, &ompi_mpi_op_bxor);
pub const MPI_MAXLOC = OMPI_PREDEFINED_GLOBAL(MPI_Op, &ompi_mpi_op_maxloc);
pub const MPI_MINLOC = OMPI_PREDEFINED_GLOBAL(MPI_Op, &ompi_mpi_op_minloc);
pub const MPI_REPLACE = OMPI_PREDEFINED_GLOBAL(MPI_Op, &ompi_mpi_op_replace);
pub const MPI_NO_OP = OMPI_PREDEFINED_GLOBAL(MPI_Op, &ompi_mpi_op_no_op);
// /usr/include/mpi.h:1232:9: warning: macro 'MPI_DATATYPE_NULL' contains a runtime value, translated to function
pub inline fn MPI_DATATYPE_NULL() @TypeOf(OMPI_PREDEFINED_GLOBAL(MPI_Datatype, ompi_mpi_datatype_null)) {
    return OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_datatype_null);
}
pub const MPI_BYTE = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_byte);
pub const MPI_PACKED = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_packed);
pub const MPI_CHAR = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_char);
pub const MPI_SHORT = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_short);
pub const MPI_INT = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_int);
pub const MPI_LONG = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_long);
pub const MPI_FLOAT = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_float);
pub const MPI_DOUBLE = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_double);
pub const MPI_LONG_DOUBLE = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_long_double);
pub const MPI_UNSIGNED_CHAR = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_unsigned_char);
pub const MPI_SIGNED_CHAR = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_signed_char);
pub const MPI_UNSIGNED_SHORT = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_unsigned_short);
pub const MPI_UNSIGNED_LONG = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_unsigned_long);
pub const MPI_UNSIGNED = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_unsigned);
pub const MPI_FLOAT_INT = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_float_int);
pub const MPI_DOUBLE_INT = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_double_int);
pub const MPI_LONG_DOUBLE_INT = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_longdbl_int);
pub const MPI_LONG_INT = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_long_int);
pub const MPI_SHORT_INT = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_short_int);
pub const MPI_2INT = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_2int);
pub const MPI_WCHAR = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_wchar);
pub const MPI_LONG_LONG_INT = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_long_long_int);
pub const MPI_LONG_LONG = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_long_long_int);
pub const MPI_UNSIGNED_LONG_LONG = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_unsigned_long_long);
pub const MPI_2COMPLEX = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_2cplex);
pub const MPI_2DOUBLE_COMPLEX = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_2dblcplex);
pub const MPI_CHARACTER = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_character);
pub const MPI_LOGICAL = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_logical);
pub const MPI_INTEGER = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_integer);
pub const MPI_REAL = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_real);
pub const MPI_DOUBLE_PRECISION = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_dblprec);
pub const MPI_COMPLEX = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_cplex);
pub const MPI_DOUBLE_COMPLEX = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_dblcplex);
pub const MPI_2REAL = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_2real);
pub const MPI_2DOUBLE_PRECISION = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_2dblprec);
pub const MPI_2INTEGER = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_2integer);
pub const MPI_INT8_T = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_int8_t);
pub const MPI_UINT8_T = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_uint8_t);
pub const MPI_INT16_T = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_int16_t);
pub const MPI_UINT16_T = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_uint16_t);
pub const MPI_INT32_T = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_int32_t);
pub const MPI_UINT32_T = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_uint32_t);
pub const MPI_INT64_T = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_int64_t);
pub const MPI_UINT64_T = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_uint64_t);
pub const MPI_AINT = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_aint);
pub const MPI_OFFSET = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_offset);
pub const MPI_C_BOOL = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_c_bool);
pub const MPI_C_COMPLEX = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_c_float_complex);
pub const MPI_C_FLOAT_COMPLEX = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_c_float_complex);
pub const MPI_C_DOUBLE_COMPLEX = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_c_double_complex);
pub const MPI_C_LONG_DOUBLE_COMPLEX = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_c_long_double_complex);
pub const MPI_CXX_BOOL = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_cxx_bool);
pub const MPI_CXX_COMPLEX = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_cxx_cplex);
pub const MPI_CXX_FLOAT_COMPLEX = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_cxx_cplex);
pub const MPI_CXX_DOUBLE_COMPLEX = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_cxx_dblcplex);
pub const MPI_CXX_LONG_DOUBLE_COMPLEX = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_cxx_ldblcplex);
pub const MPI_COUNT = OMPI_PREDEFINED_GLOBAL(MPI_Datatype, &ompi_mpi_count);
pub const MPI_ERRORS_ARE_FATAL = OMPI_PREDEFINED_GLOBAL(MPI_Errhandler, &ompi_mpi_errors_are_fatal);
pub const MPI_ERRORS_ABORT = OMPI_PREDEFINED_GLOBAL(MPI_Errhandler, &ompi_mpi_errors_abort);
pub const MPI_ERRORS_RETURN = OMPI_PREDEFINED_GLOBAL(MPI_Errhandler, &ompi_mpi_errors_return);
pub const MPI_TYPECLASS_INTEGER = @as(c_int, 1);
pub const MPI_TYPECLASS_REAL = @as(c_int, 2);
pub const MPI_TYPECLASS_COMPLEX = @as(c_int, 3);
pub inline fn MPI_Aint_add(base: anytype, disp: anytype) MPI_Aint {
    _ = &base;
    _ = &disp;
    return __helpers.cast(MPI_Aint, __helpers.cast([*c]u8, base) + disp);
}
pub inline fn MPI_Aint_diff(addr1: anytype, addr2: anytype) MPI_Aint {
    _ = &addr1;
    _ = &addr2;
    return __helpers.cast(MPI_Aint, __helpers.cast([*c]u8, addr1) - __helpers.cast([*c]u8, addr2));
}
pub inline fn PMPI_Aint_add(base: anytype, disp: anytype) @TypeOf(MPI_Aint_add(base, disp)) {
    _ = &base;
    _ = &disp;
    return MPI_Aint_add(base, disp);
}
pub inline fn PMPI_Aint_diff(addr1: anytype, addr2: anytype) @TypeOf(MPI_Aint_diff(addr1, addr2)) {
    _ = &addr1;
    _ = &addr2;
    return MPI_Aint_diff(addr1, addr2);
}
pub const MPI_INFO_KEY_SESSION_PSET_SIZE = "mpi_size";
pub const MPI_DUP_FN = OMPI_C_MPI_DUP_FN;
pub const MPI_NULL_COPY_FN = OMPI_C_MPI_NULL_COPY_FN;
pub const MPI_NULL_DELETE_FN = OMPI_C_MPI_NULL_DELETE_FN;
pub const ompi_communicator_t = struct_ompi_communicator_t;
pub const ompi_datatype_t = struct_ompi_datatype_t;
pub const ompi_errhandler_t = struct_ompi_errhandler_t;
pub const ompi_file_t = struct_ompi_file_t;
pub const ompi_group_t = struct_ompi_group_t;
pub const ompi_info_t = struct_ompi_info_t;
pub const ompi_op_t = struct_ompi_op_t;
pub const ompi_request_t = struct_ompi_request_t;
pub const ompi_message_t = struct_ompi_message_t;
pub const ompi_win_t = struct_ompi_win_t;
pub const mca_base_var_enum_t = struct_mca_base_var_enum_t;
pub const ompi_mpit_cvar_handle_t = struct_ompi_mpit_cvar_handle_t;
pub const mca_base_pvar_handle_t = struct_mca_base_pvar_handle_t;
pub const mca_base_pvar_session_t = struct_mca_base_pvar_session_t;
pub const ompi_instance_t = struct_ompi_instance_t;
pub const ompi_predefined_communicator_t = struct_ompi_predefined_communicator_t;
pub const ompi_predefined_group_t = struct_ompi_predefined_group_t;
pub const ompi_predefined_instance_t = struct_ompi_predefined_instance_t;
pub const ompi_predefined_request_t = struct_ompi_predefined_request_t;
pub const ompi_predefined_message_t = struct_ompi_predefined_message_t;
pub const ompi_predefined_op_t = struct_ompi_predefined_op_t;
pub const ompi_predefined_datatype_t = struct_ompi_predefined_datatype_t;
pub const ompi_predefined_errhandler_t = struct_ompi_predefined_errhandler_t;
pub const ompi_predefined_win_t = struct_ompi_predefined_win_t;
pub const ompi_predefined_file_t = struct_ompi_predefined_file_t;
pub const ompi_predefined_info_t = struct_ompi_predefined_info_t;
